{"version":3,"sources":["components/SkillsWithProgress/SkillsWithProgressEditor.js"],"names":["SkillsWithProgressEditor","props","useState","editorData","setEditorData","firstime","setFirstTime","title","setTitle","items","skillsProgressItems","setSkillsProgressItems","showProficiency","setShowProficiency","showProficiencyProgress","setShowProficiencyProgress","dispatch","useDispatch","closeEditor","setOpen","useEffect","updateResumeDataReducer","name","componentName","column","componentColumn","data","maxWidth","fullWidth","open","onClose","className","autoComplete","onChange","event","newVal","target","value","variant","label","checked","onShowProficiencyChange","onShowProficiencyProgressChange","map","item","index","sx","mb","mt","mr","newSkillsProgressItems","proficiency","onskillsProgressItemsChange","size","Number","step","marks","min","max","onProficiencyChange","onClick","splice","onAddSkills","onDeleteSkills","filter","length","disabled"],"mappings":"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","file":"static/js/15.d1f30ab5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { TextField, Button, Slider, Switch } from '@mui/material';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateResumeDataReducer } from '../../reducers/resumeDataSlice';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\n\r\n\r\nconst SkillsWithProgressEditor = (props) => {\r\n    const [editorData, setEditorData] = useState(props.editorData);\r\n    const [firstime, setFirstTime] = useState(false);\r\n    const [title, setTitle] = useState(editorData.title);\r\n    const [skillsProgressItems, setSkillsProgressItems] = useState(editorData.items);\r\n    const [showProficiency, setShowProficiency] = useState(editorData.showProficiency);\r\n    const [showProficiencyProgress, setShowProficiencyProgress] = useState(editorData.showProficiencyProgress);\r\n    const dispatch = useDispatch();\r\n\r\n    const onTitleChange = (event) => {\r\n        const newVal = event.target.value;\r\n        setTitle(newVal);\r\n    }\r\n\r\n    const onShowProficiencyChange = (event) => {\r\n        setShowProficiency(event.target.checked);\r\n    }\r\n\r\n    const onShowProficiencyProgressChange = (event) => {\r\n        setShowProficiencyProgress(event.target.checked);\r\n    }\r\n\r\n    const onskillsProgressItemsChange = (event, index) => {\r\n        let newSkillsProgressItems = [...skillsProgressItems];\r\n        newSkillsProgressItems[index] = { title: event.target.value, proficiency: 0 };\r\n        setSkillsProgressItems(newSkillsProgressItems);\r\n    }\r\n\r\n    const onAddSkills = (event, index) => {\r\n        let newSkillsProgressItems = [...skillsProgressItems];\r\n        newSkillsProgressItems.splice(index + 1, 0, { title: '', proficiency: 0 });\r\n        setSkillsProgressItems(newSkillsProgressItems);\r\n    }\r\n    const onDeleteSkills = (event, index) => {\r\n        let newSkillsProgressItems = [...skillsProgressItems];\r\n        newSkillsProgressItems.splice(index, 1);\r\n        setSkillsProgressItems(newSkillsProgressItems);\r\n    }\r\n\r\n    const onProficiencyChange = (event, index) => {\r\n        let newSkillsProgressItems = [...skillsProgressItems];\r\n        newSkillsProgressItems[index] = {title: newSkillsProgressItems[index].title, proficiency: event.target.value};\r\n        setSkillsProgressItems(newSkillsProgressItems);\r\n    }\r\n\r\n    const onSave = (event) => {\r\n        setEditorData({ ...editorData, title: title, showProficiency: showProficiency, showProficiencyProgress: showProficiencyProgress, items: skillsProgressItems.filter((item, index) => item.title.length > 0) });\r\n        setFirstTime(true);\r\n    }\r\n\r\n    const closeEditor = () => {\r\n        props.setOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (firstime) {\r\n            dispatch(updateResumeDataReducer({ name: props.componentName, column: props.componentColumn, data: editorData }));\r\n            setFirstTime(true);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [editorData]);\r\n\r\n\r\n    return (\r\n        <Dialog maxWidth='sm' fullWidth={true} open={props.open} onClose={closeEditor}>\r\n            <DialogContent>\r\n                <div className='editor-wrap'>\r\n                    <div className='editor-heading-wrap'>\r\n                        <TextField fullWidth autoComplete='off' onChange={onTitleChange} value={title} variant=\"standard\" />\r\n                    </div>\r\n\r\n                    <div className=\"editor-options-wrap\">\r\n                        <div>\r\n                            Show Proficiency: <Switch label=\"Proficiency\" onChange={ (event) => onShowProficiencyChange(event)} checked={showProficiency} />\r\n                        </div>\r\n                        <div>\r\n                            Show Proficiency Progress: <Switch label=\"Proficiency Progress\" onChange={(event) => onShowProficiencyProgressChange(event)} checked={showProficiencyProgress}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"editor-items-wrap\">\r\n                        {skillsProgressItems.map((item, index) => {\r\n                            return (\r\n                                <div className='editor-item' key={index}>\r\n                                    <TextField\r\n                                        label={\"Option \" + (index + 1)}\r\n                                        sx={{ mb: 1, mt: 1, mr: 1 }}\r\n                                        onChange={(event) => onskillsProgressItemsChange(event, index)}\r\n                                        value={item.title}\r\n                                        data-key={index}\r\n                                        size=\"small\"\r\n                                    />\r\n                                    <div className='progress-wrap'>\r\n                                        {item.proficiency}\r\n                                        <Slider\r\n                                            aria-label=\"Proficiency\"\r\n                                            value={ Number(item.proficiency) }\r\n                                            step={10}\r\n                                            marks\r\n                                            min={0}\r\n                                            max={100}\r\n                                            onChange={(event) => onProficiencyChange(event, index)}\r\n                                        />\r\n                                    </div>\r\n                                    <AddCircleIcon onClick={(event) => onAddSkills(event, index)} className='add-item-icon'></AddCircleIcon>\r\n                                    <DeleteForeverIcon onClick={(event) => onDeleteSkills(event, index)} className={`delete-item-icon ${index === 0 ? 'd-none' : ''}`}></DeleteForeverIcon>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </DialogContent>\r\n            \r\n            <DialogActions>\r\n                <Button onClick={closeEditor}>Cancel</Button>\r\n                <Button onClick={onSave} disabled={!skillsProgressItems.filter(item => item.title.length > 0).length} >Save</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default SkillsWithProgressEditor;"],"sourceRoot":""}