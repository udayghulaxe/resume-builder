{"version":3,"sources":["components/Achievements/AchievementEditor.js"],"names":["AchievementEditor","props","useState","editorData","setEditorData","firstime","setFirstTime","title","setTitle","items","achievementItems","setAchievementItems","showIcon","setShowIcon","dispatch","useDispatch","closeEditor","setOpen","useEffect","updateResumeDataReducer","name","componentName","column","componentColumn","data","maxWidth","fullWidth","open","onClose","className","autoComplete","onChange","event","newVal","target","value","variant","label","checked","map","item","index","sx","mb","mt","mr","skills","onAchievementChange","multiline","rows","inputProps","style","fontSize","lineHeight","width","onClick","splice","onAddAchievement","onDeleteAchievement","filter","length","console","log","disabled"],"mappings":"kRA+GeA,UApGW,SAACC,GACvB,MAAoCC,mBAASD,EAAME,YAAnD,mBAAOA,EAAP,KAAmBC,EAAnB,KACA,EAAiCF,oBAAS,GAA1C,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAASC,EAAWI,OAA9C,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAAgDN,mBAASC,EAAWM,OAApE,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAAgCT,mBAASC,EAAWS,UAApD,mBAAOA,EAAP,KAAiBC,EAAjB,KACMC,EAAWC,cAmCXC,EAAc,WAChBf,EAAMgB,SAAQ,IAYlB,OATAC,qBAAU,WACFb,IACAS,EAASK,YAAwB,CAAEC,KAAMnB,EAAMoB,cAAeC,OAAQrB,EAAMsB,gBAAiBC,KAAMrB,KACnGG,GAAa,MAGlB,CAACH,IAIA,eAAC,IAAD,CAAQsB,SAAS,KAAKC,WAAW,EAAMC,KAAM1B,EAAM0B,KAAMC,QAASZ,EAAlE,UACI,cAAC,IAAD,UACI,sBAAKa,UAAU,cAAf,UACI,qBAAKA,UAAU,sBAAf,SACI,cAAC,IAAD,CAAWH,WAAS,EAACI,aAAa,MAAMC,SAnDtC,SAACC,GACnB,IAAMC,EAASD,EAAME,OAAOC,MAC5B3B,EAASyB,IAiDwEE,MAAO5B,EAAO6B,QAAQ,eAG3F,qBAAKP,UAAU,sBAAf,SACI,8CACe,cAAC,IAAD,CAAQQ,MAAM,UAAUN,SAnDlC,SAACC,GACtBnB,EAAYmB,EAAME,OAAOI,UAkD0DA,QAAS1B,SAIhF,qBAAKiB,UAAU,oBAAf,SACKnB,EAAiB6B,KAAI,SAACC,EAAMC,GACzB,OACI,sBAAKZ,UAAU,cAAf,UACI,cAAC,IAAD,CACIQ,MAAO,WAAaI,EAAQ,GAC5BC,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACxBd,SAAU,SAACC,GAAD,OAzDlB,SAACA,EAAOS,GAChC,IAAIK,EAAM,YAAOpC,GACjBoC,EAAOL,GAAS,CAAElC,MAAOyB,EAAME,OAAOC,OACtCxB,EAAoBmC,GAsDiCC,CAAoBf,EAAOS,IAChDN,MAAOK,EAAKjC,MACZ,WAAUkC,EACVO,WAAS,EACTC,KAAM,EACNC,WAAY,CAACC,MAAO,CAACC,SAAU,GAAIC,WAAY,MAC/CF,MAAS,CAACG,MAAO,OAErB,cAAC,IAAD,CAAeC,QAAS,SAACvB,GAAD,OA3D/B,SAACA,EAAOS,GAC7B,IAAIK,EAAM,YAAOpC,GACjBoC,EAAOU,OAAOf,EAAQ,EAAG,EAAG,CAAElC,MAAO,KACrCI,EAAoBmC,GAwD2CW,CAAiBzB,EAAOS,IAAQZ,UAAU,kBAC7E,cAAC,IAAD,CAAmB0B,QAAS,SAACvB,GAAD,OAvDhC,SAACA,EAAOS,GAChC,IAAIK,EAAM,YAAOpC,GACjBoC,EAAOU,OAAOf,EAAO,GACrB9B,EAAoBmC,GAoD+CY,CAAoB1B,EAAOS,IAAQZ,UAAS,2BAAgC,IAAVY,EAAc,SAAW,QAbpGA,aAqBtD,eAAC,IAAD,WACI,cAAC,IAAD,CAAQc,QAASvC,EAAjB,oBACA,cAAC,IAAD,CAAQuC,QA3DL,SAACvB,GACZ5B,EAAc,2BAAKD,GAAN,IAAkBI,MAAOA,EAAOK,SAAUA,EAAUH,MAAOC,EAAiBiD,QAAO,SAACnB,EAAMC,GAAP,OAAiBD,EAAKjC,MAAMqD,OAAS,QACrItD,GAAa,GACbuD,QAAQC,IAAI3D,IAwDqB4D,UAAWrD,EAAiBiD,QAAO,SAAAnB,GAAI,OAAIA,EAAKjC,MAAMqD,OAAS,KAAGA,OAA3F","file":"static/js/9.bb0af2dc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { TextField, Button, Switch } from '@mui/material';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateResumeDataReducer } from '../../reducers/resumeDataSlice';\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\n\r\nconst AchievementEditor = (props) => {\r\n    const [editorData, setEditorData] = useState(props.editorData);\r\n    const [firstime, setFirstTime] = useState(false);\r\n    const [title, setTitle] = useState(editorData.title);\r\n    const [achievementItems, setAchievementItems] = useState(editorData.items);\r\n    const [showIcon, setShowIcon] = useState(editorData.showIcon);\r\n    const dispatch = useDispatch();\r\n\r\n    const onTitleChange = (event) => {\r\n        const newVal = event.target.value;\r\n        setTitle(newVal);\r\n    }\r\n\r\n    const onShowIconChange = (event) => {\r\n        setShowIcon(event.target.checked);\r\n    }\r\n\r\n\r\n    const onAchievementChange = (event, index) => {\r\n        let skills = [...achievementItems];\r\n        skills[index] = { title: event.target.value };\r\n        setAchievementItems(skills);\r\n    }\r\n\r\n    const onAddAchievement = (event, index) => {\r\n        let skills = [...achievementItems];\r\n        skills.splice(index + 1, 0, { title: '' });\r\n        setAchievementItems(skills);\r\n    }\r\n    const onDeleteAchievement = (event, index) => {\r\n        let skills = [...achievementItems];\r\n        skills.splice(index, 1);\r\n        setAchievementItems(skills);\r\n    }\r\n\r\n    const onSave = (event) => {\r\n        setEditorData({ ...editorData, title: title, showIcon: showIcon, items: achievementItems.filter((item, index) => item.title.length > 0) });\r\n        setFirstTime(true);\r\n        console.log(editorData);\r\n    }\r\n\r\n    const closeEditor = () => {\r\n        props.setOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (firstime) {\r\n            dispatch(updateResumeDataReducer({ name: props.componentName, column: props.componentColumn, data: editorData }));\r\n            setFirstTime(true);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [editorData]);\r\n\r\n\r\n    return (\r\n        <Dialog maxWidth='sm' fullWidth={true} open={props.open} onClose={closeEditor}>\r\n            <DialogContent>\r\n                <div className='editor-wrap'>\r\n                    <div className='editor-heading-wrap'>\r\n                        <TextField fullWidth autoComplete='off' onChange={onTitleChange} value={title} variant=\"standard\" />\r\n                    </div>\r\n\r\n                    <div className=\"editor-options-wrap\">\r\n                        <div>\r\n                            Show Icon: <Switch label=\"Rounded\" onChange={onShowIconChange} checked={showIcon} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"editor-items-wrap\">\r\n                        {achievementItems.map((item, index) => {\r\n                            return (\r\n                                <div className='editor-item' key={index}>\r\n                                    <TextField\r\n                                        label={\"Option \" + (index + 1)}\r\n                                        sx={{ mb: 1, mt: 1, mr: 1}}\r\n                                        onChange={(event) => onAchievementChange(event, index)}\r\n                                        value={item.title}\r\n                                        data-key={index}\r\n                                        multiline\r\n                                        rows={2}\r\n                                        inputProps={{style: {fontSize: 14, lineHeight: 1.2}}}\r\n                                        style = {{width: 380}}\r\n                                    />\r\n                                    <AddCircleIcon onClick={(event) => onAddAchievement(event, index)} className='add-item-icon'></AddCircleIcon>\r\n                                    <DeleteForeverIcon onClick={(event) => onDeleteAchievement(event, index)} className={`delete-item-icon ${index === 0 ? 'd-none' : ''}`}></DeleteForeverIcon>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </DialogContent>\r\n            \r\n            <DialogActions>\r\n                <Button onClick={closeEditor}>Cancel</Button>\r\n                <Button onClick={onSave} disabled={!achievementItems.filter(item => item.title.length > 0).length}>Save</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default AchievementEditor;"],"sourceRoot":""}