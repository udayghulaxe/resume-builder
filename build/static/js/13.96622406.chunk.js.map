{"version":3,"sources":["components/Experience/ExperienceEditor.js"],"names":["ExperienceEditor","props","useState","editorData","setEditorData","firstime","setFirstTime","title","setTitle","dispatch","useDispatch","items","experienceItems","setExperienceItems","onFieldChange","event","index","property","newValue","target","value","newExperienceItems","closeEditor","setOpen","useEffect","console","log","updateResumeDataReducer","name","componentName","column","componentColumn","data","maxWidth","fullWidth","open","onClose","className","autoComplete","onChange","newVal","variant","map","item","label","sx","mb","mt","mr","experienceTitle","inputProps","style","fontSize","size","company","date","location","experienceSummary","rows","width","multiline","onClick","splice","onAddExperience","onDeleteExperience","height","filter","length","disabled"],"mappings":"kSAoMeA,UAzLU,SAACC,GACxB,MAAoCC,mBAASD,EAAME,YAAnD,mBAAOA,EAAP,KAAmBC,EAAnB,KACA,EAAiCF,oBAAS,GAA1C,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAASC,EAAWI,OAA9C,mBAAOA,EAAP,KAAcC,EAAd,KACMC,EAAWC,cACjB,EAA8CR,mBAASC,EAAWQ,OAAlE,mBAAOC,EAAP,KAAwBC,EAAxB,KAoBMC,EAAgB,SAACC,EAAOC,EAAOC,GACnC,IAAMC,EAAWH,EAAMI,OAAOC,MAC1BC,EAAkB,YAAOT,GAC7BS,EAAmBL,GAAnB,2BACKK,EAAmBL,IADxB,kBAEGC,EAAWC,IAEdL,EAAmBQ,IAqBfC,EAAc,WAClBrB,EAAMsB,SAAQ,IAkBhB,OAfAC,qBAAU,WACJnB,IACFoB,QAAQC,IAAI,QAASzB,GACrBQ,EACEkB,YAAwB,CACtBC,KAAM3B,EAAM4B,cACZC,OAAQ7B,EAAM8B,gBACdC,KAAM7B,KAGVG,GAAa,MAGd,CAACH,IAGF,eAAC,IAAD,CACE8B,SAAS,KACTC,WAAW,EACXC,KAAMlC,EAAMkC,KACZC,QAASd,EAJX,UAME,cAAC,IAAD,UACE,sBAAKe,UAAU,cAAf,UACE,qBAAKA,UAAU,sBAAf,SACE,cAAC,IAAD,CACEH,WAAS,EACTI,aAAa,MACbC,SAjEU,SAACxB,GACrB,IAAMyB,EAASzB,EAAMI,OAAOC,MAC5BZ,EAASgC,IAgECpB,MAAOb,EACPkC,QAAQ,eAIZ,qBAAKJ,UAAU,oBAAf,SACGzB,EAAgB8B,KAAI,SAACC,EAAM3B,GAC1B,OACE,gCACE,sBAAKqB,UAAU,cAAf,UACE,gCACE,cAAC,IAAD,CACEO,MAAM,WACNC,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACxBT,SAAU,SAACxB,GAAD,OACRD,EAAcC,EAAOC,EAAO,oBAE9BI,MAAOuB,EAAKM,gBACZC,WAAY,CAAEC,MAAO,CAAEC,SAAU,KACjCC,KAAK,UAGP,cAAC,IAAD,CACET,MAAM,UACNC,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACxBT,SAAU,SAACxB,GAAD,OACRD,EAAcC,EAAOC,EAAO,YAE9BI,MAAOuB,EAAKW,QACZJ,WAAY,CAAEC,MAAO,CAAEC,SAAU,KACjCC,KAAK,UAGP,cAAC,IAAD,CACET,MAAM,OACNC,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACxBT,SAAU,SAACxB,GAAD,OACRD,EAAcC,EAAOC,EAAO,SAE9BI,MAAOuB,EAAKY,KACZL,WAAY,CAAEC,MAAO,CAAEC,SAAU,KACjCC,KAAK,UAGP,cAAC,IAAD,CACET,MAAM,WACNC,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACxBT,SAAU,SAACxB,GAAD,OACRD,EAAcC,EAAOC,EAAO,aAE9BI,MAAOuB,EAAKa,SACZN,WAAY,CAAEC,MAAO,CAAEC,SAAU,KACjCC,KAAK,UAGP,cAAC,IAAD,CACET,MAAM,UACNC,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACxBT,SAAU,SAACxB,GAAD,OACRD,EAAcC,EAAOC,EAAO,sBAE9BI,MAAOuB,EAAKc,kBACZP,WAAY,CAAEC,MAAO,CAAEC,SAAU,KACjCM,KAAM,EACNP,MAAS,CAACQ,MAAO,KACjBC,WAAS,OAIb,cAAC,IAAD,CACEC,QAAS,SAAC9C,GAAD,OAzHL,SAACA,EAAOC,GAC9B,IAAIK,EAAkB,YAAOT,GAC7BS,EAAmByC,OAAO9C,EAAQ,EAAG,EAAG,CACtCiC,gBAAiB,GACjBK,QAAS,GACTC,KAAM,GACNC,SAAU,GACVC,kBAAmB,KAErB5C,EAAmBQ,GAgHmB0C,CAAgBhD,EAAOC,IAC3CqB,UAAU,kBAEZ,cAAC,IAAD,CACEwB,QAAS,SAAC9C,GAAD,OAjHF,SAACA,EAAOC,GACjC,IAAIK,EAAkB,YAAOT,GAC7BS,EAAmByC,OAAO9C,EAAO,GACjCH,EAAmBQ,GA8GmB2C,CAAmBjD,EAAOC,IAC9CqB,UAAS,2BACG,IAAVrB,EAAc,SAAW,SAI/B,cAAC,IAAD,CAAK6B,GAAI,CAAEoB,OAAQ,MACnB,cAAC,IAAD,IACA,cAAC,IAAD,CAAKpB,GAAI,CAAEoB,OAAQ,QA1EXjD,aAkFpB,eAAC,IAAD,WACE,cAAC,IAAD,CAAQ6C,QAASvC,EAAjB,oBACA,cAAC,IAAD,CAAQuC,QA3KC,SAAC9C,GACdU,QAAQC,IAAI,kBAAmBd,GAC/BR,EAAc,2BACTD,GADQ,IAEXI,MAAOA,EACPI,MAAOC,EAAgBsD,QACrB,SAACvB,EAAM3B,GAAP,OAAiB2B,EAAKM,gBAAgBkB,OAAS,QAGnD7D,GAAa,GACbmB,QAAQC,IAAIvB,IAiKiBiE,UAAWxD,EAAgBsD,QAAO,SAAAvB,GAAI,OAAIA,EAAKM,gBAAgBkB,OAAS,KAAGA,OAApG","file":"static/js/13.96622406.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { TextField, Button, Divider, Box } from \"@mui/material\";\r\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\r\nimport DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateResumeDataReducer } from \"../../reducers/resumeDataSlice\";\r\n\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\n\r\nconst ExperienceEditor = (props) => {\r\n  const [editorData, setEditorData] = useState(props.editorData);\r\n  const [firstime, setFirstTime] = useState(false);\r\n  const [title, setTitle] = useState(editorData.title);\r\n  const dispatch = useDispatch();\r\n  const [experienceItems, setExperienceItems] = useState(editorData.items);\r\n\r\n  const onSave = (event) => {\r\n    console.log(\"experienceItems\", experienceItems);\r\n    setEditorData({\r\n      ...editorData,\r\n      title: title,\r\n      items: experienceItems.filter(\r\n        (item, index) => item.experienceTitle.length > 0\r\n      ),\r\n    });\r\n    setFirstTime(true);\r\n    console.log(editorData);\r\n  };\r\n\r\n  const onTitleChange = (event) => {\r\n    const newVal = event.target.value;\r\n    setTitle(newVal);\r\n  };\r\n\r\n  const onFieldChange = (event, index, property) => {\r\n    const newValue = event.target.value;\r\n    let newExperienceItems = [...experienceItems];\r\n    newExperienceItems[index] = {\r\n      ...newExperienceItems[index],\r\n      [property]: newValue,\r\n    };\r\n    setExperienceItems(newExperienceItems);\r\n  };\r\n\r\n  const onAddExperience = (event, index) => {\r\n    let newExperienceItems = [...experienceItems];\r\n    newExperienceItems.splice(index + 1, 0, {\r\n      experienceTitle: \"\",\r\n      company: \"\",\r\n      date: \"\",\r\n      location: \"\",\r\n      experienceSummary: \"\",\r\n    });\r\n    setExperienceItems(newExperienceItems);\r\n  };\r\n\r\n  const onDeleteExperience = (event, index) => {\r\n    let newExperienceItems = [...experienceItems];\r\n    newExperienceItems.splice(index, 1);\r\n    setExperienceItems(newExperienceItems);\r\n  };\r\n\r\n  const closeEditor = () => {\r\n    props.setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (firstime) {\r\n      console.log(\"props\", props);\r\n      dispatch(\r\n        updateResumeDataReducer({\r\n          name: props.componentName,\r\n          column: props.componentColumn,\r\n          data: editorData,\r\n        })\r\n      );\r\n      setFirstTime(true);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [editorData]);\r\n\r\n  return (\r\n    <Dialog\r\n      maxWidth=\"sm\"\r\n      fullWidth={true}\r\n      open={props.open}\r\n      onClose={closeEditor}\r\n    >\r\n      <DialogContent>\r\n        <div className=\"editor-wrap\">\r\n          <div className=\"editor-heading-wrap\">\r\n            <TextField\r\n              fullWidth\r\n              autoComplete=\"off\"\r\n              onChange={onTitleChange}\r\n              value={title}\r\n              variant=\"standard\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"editor-items-wrap\">\r\n            {experienceItems.map((item, index) => {\r\n              return (\r\n                <div key={index}>\r\n                  <div className=\"editor-item\">\r\n                    <div>\r\n                      <TextField\r\n                        label=\"Job Role\"\r\n                        sx={{ mb: 1, mt: 1, mr: 1 }}\r\n                        onChange={(event) =>\r\n                          onFieldChange(event, index, \"experienceTitle\")\r\n                        }\r\n                        value={item.experienceTitle}\r\n                        inputProps={{ style: { fontSize: 14 } }}\r\n                        size=\"small\"\r\n                      />\r\n\r\n                      <TextField\r\n                        label=\"Company\"\r\n                        sx={{ mb: 1, mt: 1, mr: 1 }}\r\n                        onChange={(event) =>\r\n                          onFieldChange(event, index, \"company\")\r\n                        }\r\n                        value={item.company}\r\n                        inputProps={{ style: { fontSize: 14 } }}\r\n                        size=\"small\"\r\n                      />\r\n\r\n                      <TextField\r\n                        label=\"Date\"\r\n                        sx={{ mb: 1, mt: 1, mr: 1 }}\r\n                        onChange={(event) =>\r\n                          onFieldChange(event, index, \"date\")\r\n                        }\r\n                        value={item.date}\r\n                        inputProps={{ style: { fontSize: 14 } }}\r\n                        size=\"small\"\r\n                      />\r\n\r\n                      <TextField\r\n                        label=\"location\"\r\n                        sx={{ mb: 1, mt: 1, mr: 1 }}\r\n                        onChange={(event) =>\r\n                          onFieldChange(event, index, \"location\")\r\n                        }\r\n                        value={item.location}\r\n                        inputProps={{ style: { fontSize: 14 } }}\r\n                        size=\"small\"\r\n                      />\r\n\r\n                      <TextField\r\n                        label=\"Summary\"\r\n                        sx={{ mb: 1, mt: 1, mr: 1 }}\r\n                        onChange={(event) =>\r\n                          onFieldChange(event, index, \"experienceSummary\")\r\n                        }\r\n                        value={item.experienceSummary}\r\n                        inputProps={{ style: { fontSize: 14 } }}\r\n                        rows={3}\r\n                        style = {{width: 380}}\r\n                        multiline\r\n                        \r\n                      />\r\n                    </div>\r\n                    <AddCircleIcon\r\n                      onClick={(event) => onAddExperience(event, index)}\r\n                      className=\"add-item-icon\"\r\n                    ></AddCircleIcon>\r\n                    <DeleteForeverIcon\r\n                      onClick={(event) => onDeleteExperience(event, index)}\r\n                      className={`delete-item-icon ${\r\n                        index === 0 ? \"d-none\" : \"\"\r\n                      }`}\r\n                    ></DeleteForeverIcon>\r\n                  </div>\r\n                  <Box sx={{ height: 20 }}></Box>\r\n                  <Divider></Divider>\r\n                  <Box sx={{ height: 20 }}></Box>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n\r\n      <DialogActions>\r\n        <Button onClick={closeEditor}>Cancel</Button>\r\n        <Button onClick={onSave} disabled={!experienceItems.filter(item => item.experienceTitle.length > 0).length}>Save</Button>\r\n        {/*  */}\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ExperienceEditor;\r\n"],"sourceRoot":""}