{"version":3,"sources":["logo.svg","reducers/authSlice.js","firebase.js","components/Login/GoogleLogin.js","components/GlobalHeader/GlobalHeader.js","pages/About/About.js","pages/Contact/Contact.js","reducers/resumeDataSlice.js","reducers/resumeSettingsSlice.js","globals.js","reducers/userDataSlice.js","components/GlobalResumeSetting/GlobalResumeSetting.js","components/Achievements/AchievementEditor.js","components/Achievements/Achievement.js","components/BasicInfo/BasicInfoEditor.js","components/BasicInfo/BasicInfo.js","components/Education/EducationEditor.js","components/Education/Education.js","components/Experience/ExperienceEditor.js","components/Experience/Experience.js","components/Languages/LanguagesEditor.js","components/Languages/Languages.js","components/ProfessionalSummary/ProfessionalSummaryEditor.js","components/ProfessionalSummary/ProfessionalSummary.js","components/Skills/SkillsEditor.js","components/Skills/Skills.js","components/SkillsWithProgress/SkillsWithProgressEditor.js","components/SkillsWithProgress/SkillsWithProgress.js","components/Social/SocialEditor.js","components/Social/Social.js","components/Divider/DividerEditor.js","components/Divider/Divider.js","pages/Builder/Builder.js","assets/images/resume-2.svg","pages/Resumes/Resumes.js","pages/Home/Home.js","components/App/App.js","theme/index.js","reducers/index.js","index.js"],"names":["INITIAL_STATE","isSignedIn","localStorage","getItem","userId","name","email","authSlice","createSlice","initialState","reducers","signInAction","state","action","payload","signOutAction","actions","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","GoogleLogin","onAuthChange","isSignedInStatus","props","auth","currentUser","get","getId","getBasicProfile","getName","getEmail","onSignInClick","signIn","then","firestore","collection","doc","exists","setItem","getAuthResponse","id_token","history","replace","set","userResumes","JSON","stringify","catch","error","console","log","onSignOutClick","signOut","removeItem","window","gapi","load","client","init","clientId","scope","auth2","getAuthInstance","listen","this","className","CircularProgress","size","Button","component","NavLink","to","exact","variant","color","disableElevation","onClick","renderAuthButton","Component","mapDispatchToProps","connect","authReducer","withRouter","GlobalHeader","useLocation","pathname","Box","sx","flexGrow","AppBar","elevation","position","Toolbar","src","logo","alt","React","memo","About","Container","maxWidth","m","textAlign","Contact","getResumeDataByResumeId","createAsyncThunk","resumeId","thunkAPI","a","data","response","parse","resumeJson","updateResumeDataByResumeId","apiData","update","resumeDataSlice","resumeData","loading","openEditorName","updateResumeDataReducer","column","filter","item","componentData","updateOpenEditorName","extraReducers","builder","addCase","fulfilled","getResumeSettingsByResumeId","resumeSettings","updateResumeSettingsByResumeId","resumeSettingsSlice","updateSettingsDataReducer","richEditorSettings","toolbar","header","align","list","indent","background","initialData","bodyFontSize","headingFontSize","subheadingFontSize","bodyFontColor","headingFontColor","subheadingFontColor","headerBackgroundColor","mainBackgroundColor","sidebarBackgroundColor","sidebarHeadingColor","sidebarBodyColor","aboutSectionFontColor","headingAlignment","sidebar","sidebarPosition","componentType","path","title","items","summary","hideTitle","main","university","date","gpa","showIcon","experienceTitle","company","location","experienceSummary","filled","rounded","socialPlatform","username","pageTwo","componentLibrary","showProficiency","showProficiencyProgress","proficiencyProgressColor","language","proficiency","styles","type","label","rule","value","unit","options","colors","fontSizes","getUserDataByUserId","updateUserResumeDataByUserId","deleteResumeByResumeId","delete","copyResumeByResumeId","uniqueId","createNewReumseByUserId","userResumeData","resumeName","length","resumeImage","newResumesArr","fullName","userData","website","phone","address","userDataSlice","updateUserDataReducer","GlobalResumeSetting","useState","headerFontColorToggle","headingFontColorToggle","subheadingFontColorToggle","bodyFontToggle","headerBackgroundColorToggle","sidebarBackgroundColorToogle","sidebarHeadingColorToggle","mainBackgroundColorToggle","colorsToggles","setColorsToggles","closeEditor","openEditorSection","changeFontColor","property","document","querySelector","style","setProperty","changeHeadingAlignment","e","alignment","setResumeSettings","openColorToggle","colorToggleProp","changeSidebarPosition","updateGlobalSetting","backgroundColor","onChangeComplete","hex","triangle","bodyFontColorToggle","sidebarBodyColorToggle","sidebarBackgroundColorToggle","event","map","font","index","AchievementEditor","editorData","setEditorData","dispatch","useDispatch","onWidgetDataChange","key","newValue","newData","setWidgetData","setOpen","ReactDOM","createPortal","componentName","componentColumn","disabled","TextField","fullWidth","autoComplete","onChange","newVal","target","Switch","checked","mb","mt","mr","skills","onAchievementChange","multiline","rows","inputProps","fontSize","lineHeight","width","splice","onAddAchievement","onDeleteAchievement","getElementById","Achievement","open","componentItem","widgetData","useSelector","resumeDataReducer","titleAccess","BasicInfoEditor","onDataChange","readOnly","currentRole","Item","styled","theme","typography","caption","display","alignItems","BasicInfo","Grid","container","justifyContent","rowSpacing","columnSpacing","xs","sm","md","pl","EducationEditor","newTitle","newEducationItems","onEducationTitleChange","newUniversity","onUniversityChange","newDate","onDateChange","placeholder","newGPA","onGpaChange","onAddEducation","onDeleteEducation","height","Education","ExperienceEditor","onFieldChange","newExperienceItems","defaultValue","modules","val","onSummaryChange","onAddExperience","onDeleteExperience","Experience","dangerouslySetInnerHTML","__html","LanguagesEditor","toggleColor","setToggleColor","getProficiencyValue","prof","onShowProficiencyChange","onShowProficiencyProgressChange","marginTop","marginBottom","languages","onLanguageChange","Slider","step","marks","min","max","onProficiencyChange","onAddLanguage","onDeleteLanguage","Languages","getProgressFromProficiency","LinearProgress","SocialEditor","onHideTitle","newprofessionalSummaryItems","ProfessionalSummary","openEditor","ProfessionalSummaryEditor","SkillsEditor","onSkillChange","onAddSkill","onDeleteSkill","Skills","Chip","SkillsWithProgressEditor","newSkillsProgressItems","onskillsProgressItemsChange","Number","onAddSkills","onDeleteSkills","SkillsWithProgress","newSocialItems","onAddSocial","Social","DividerEditor","updateStyle","s","find","spacing","select","margin","InputProps","onStyleChange","option","MenuItem","Divider","forEach","Builder","resumeHTML","resumeSettingsReducer","userDataReducer","arr","setItems","setPageTwo","isLoading","setIsLoading","openSnackbar","setopenSnackbar","useParams","updateResumeData","res","setTimeout","checkForPageTwo","useEffect","root","paperheight","clientHeight","childs","children","i","moveLastComponentToPageTwo","newArr","push","pop","onSidebarSettingClick","updateResumeThumbnail","pageOneElement","html2canvas","canvas","userResumesData","resume","toString","toDataURL","copyComponent","copy","Math","floor","random","Date","now","removeComponent","deleteComponent","getComponent","columnName","onDragEnd","result","destination","source","draggableId","droppableId","Array","from","x","colId","newColumn","sourceId","destId","sourceArr","destArr","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","onClose","Alert","severity","startIcon","mergedArr","scrollIntoView","behavior","print","id","Paper","provided","snapshot","ref","innerRef","droppableProps","isDraggingOver","isDragging","draggableProps","dragHandleProps","fallback","Autocomplete","renderInput","params","padding","addComponentToResume","Resumes","setUserData","setUserResumes","previewResumeImageSrc","setPreviewResumeImageSrc","useHistory","getUserData","getUniqueId","Dialog","scroll","DialogContent","backgroundImage","copyFrom","newResumeData","onDeleteResume","direction","resumeSvg","Home","App","createTheme","palette","primary","components","MuiButton","variants","paddingLeft","paddingRight","store","configureStore","reducer","render","ThemeProvider"],"mappings":"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","file":"static/js/main.810429f2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { createSlice } from '@reduxjs/toolkit';\n\nconst INITIAL_STATE = {\n    isSignedIn: localStorage.getItem('token') == null ? false : true,\n    userId: null,\n    name: null,\n    email: null,\n};\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState: INITIAL_STATE,\n    reducers: {\n        signInAction: (state, action) => {\n            state.isSignedIn = true;\n            state.userId = action.payload.userId;\n            state.name = action.payload.name;\n            state.email = action.payload.email;\n        },\n        signOutAction: state => {\n            state.isSignedIn = false;\n            state.userId = null;\n            state.name = null;\n            state.email = null;\n        },\n    },\n});\n\nexport const { signInAction, signOutAction } = authSlice.actions;\n\nexport default authSlice.reducer;\n","import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: 'AIzaSyBjh7R7l6f9rTW8Oll_uzx2q50uJNWRjbU',\n    authDomain: 'resume-builder-c4248.firebaseapp.com',\n    projectId: 'resume-builder-c4248',\n    storageBucket: 'resume-builder-c4248.appspot.com',\n    messagingSenderId: '790181104761',\n    appId: '1:790181104761:web:3f3e105c4d46cd7c09d8a8',\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport Button from '@mui/material/Button';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { connect } from 'react-redux';\nimport { signInAction, signOutAction } from '../../reducers/authSlice.js';\nimport { withRouter, NavLink } from 'react-router-dom';\nimport firebase from '../../firebase';\n\nclass GoogleLogin extends Component {\n    // If not using arrow function then we need to bind `this` like below\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {isSignedIn: null};\n    //     this.onAuthChange = this.onAuthChange.bind(this)\n    // }\n\n    componentDidMount() {\n        window.gapi.load('client:auth2', () => {\n            window.gapi.client\n                .init({\n                    clientId: '1051932499833-smce802vivdpiijmo5bg4donrr6n40fg.apps.googleusercontent.com',\n                    scope: 'email profile',\n                })\n                .then(() => {\n                    this.auth = window.gapi.auth2.getAuthInstance();\n\n                    this.onAuthChange(this.auth.isSignedIn.get());\n                    // listen for auth changes in future\n                    this.auth.isSignedIn.listen(this.onAuthChange);\n                });\n        });\n    }\n\n    onAuthChange = isSignedInStatus => {\n        if (isSignedInStatus) {\n            this.props.signInAction({\n                userId: this.auth.currentUser.get().getId(),\n                name: this.auth.currentUser.get().getBasicProfile().getName(),\n                email: this.auth.currentUser.get().getBasicProfile().getEmail(),\n            });\n        } else {\n            this.props.signOutAction();\n        }\n    };\n\n    onSignInClick = () => {\n        this.auth.signIn().then(() => {\n            const userId = this.auth.currentUser.get().getId();\n            const name = this.auth.currentUser.get().getBasicProfile().getName();\n            const email = this.auth.currentUser.get().getBasicProfile().getEmail();\n            this.props.signInAction({\n                userId: userId,\n                name: this.auth.currentUser.get().getBasicProfile().getName(),\n                email: this.auth.currentUser.get().getBasicProfile().getEmail(),\n            });\n\n            // If first time user then create a new resume\n            firebase\n                .firestore()\n                .collection('users')\n                .doc(userId)\n                .get()\n                .then(doc => {\n                    // Existing user then redirect else create a new resume\n                    if (doc.exists) {\n                        localStorage.setItem('token', this.auth.currentUser.get().getAuthResponse().id_token);\n                        this.props.history.replace('resumes');\n                    } else {\n                        firebase\n                            .firestore()\n                            .collection('users')\n                            .doc(`${userId}`)\n                            .set({\n                                userResumes: JSON.stringify([]),\n                                userId: userId,\n                                name: name,\n                                email: email,\n                            })\n                            .then(() => {\n                                localStorage.setItem('token', this.auth.currentUser.get().getAuthResponse().id_token);\n                                this.props.history.replace(`resumes`);\n                            });\n                    }\n                })\n                .catch(error => {\n                    console.log('Error getting document:', error);\n                });\n        });\n    };\n\n    onSignOutClick = () => {\n        this.auth.signOut().then(() => {\n            localStorage.removeItem('token');\n            this.props.signOutAction();\n        });\n    };\n\n    renderAuthButton() {\n        if (this.props.isSignedIn === null) {\n            return (\n                <div className='header-login-button-wrap'>\n                    <CircularProgress className='login-loader' size={18} />\n                </div>\n            );\n        } else if (this.props.isSignedIn) {\n            return (\n                <>\n                    <Button\n                        component={NavLink}\n                        to='/resumes'\n                        exact\n                        variant='text'\n                        color='primary'\n                        disableElevation\n                        className='mobile-d-none header-menu-link'\n                    >\n                        My Resumes\n                    </Button>\n                    <Button\n                        onClick={this.onSignOutClick}\n                        variant='contained'\n                        color='primary'\n                        disableElevation\n                        className='header-login-button'\n                    >\n                        Logout\n                    </Button>\n                </>\n            );\n        } else {\n            return (\n                <Button\n                    onClick={this.onSignInClick}\n                    variant='contained'\n                    color='primary'\n                    disableElevation\n                    className='header-login-button'\n                >\n                    Create Resume\n                </Button>\n            );\n        }\n    }\n\n    render() {\n        return this.renderAuthButton();\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isSignedIn: state.authReducer.isSignedIn,\n    };\n};\n\nconst mapDispatchToProps = { signInAction, signOutAction };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(GoogleLogin));\n","import React from 'react';\nimport { AppBar, Box, Toolbar, Button } from '@mui/material';\nimport logo from '../../logo.svg';\nimport { NavLink, useLocation } from 'react-router-dom';\n\nimport GoogleLogin from '../Login/GoogleLogin';\n\nimport './GlobalHeader.css';\n\nconst GlobalHeader = () => {\n    return useLocation().pathname !== '/builder' ? (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar elevation={0} className='global-header' color='transparent' position='static'>\n                <Toolbar>\n                    <img src={logo} className='header-logo' alt='Resume Builder' />\n                    <div className='header-logo-text'>\n                        <span>Resume Builder</span>\n                    </div>\n                    <nav>\n                        <Button\n                            component={NavLink}\n                            to='/'\n                            exact\n                            variant='text'\n                            color='primary'\n                            disableElevation\n                            className='mobile-d-none header-menu-link'\n                        >\n                            Home\n                        </Button>\n\n                        {/* <Button \n                            component={NavLink}\n                            to=\"/about\"\n                            variant=\"text\"\n                            color=\"primary\" \n                            disableElevation\n                            className=\"mobile-d-none header-menu-link\">\n                                About\n                        </Button>\n                        <Button\n                            component={NavLink}\n                            to=\"/contact\"\n                            variant=\"text\"\n                            color=\"primary\" \n                            disableElevation\n                            className=\"mobile-d-none header-menu-link\">\n                                Contact\n                        </Button> */}\n                        <GoogleLogin></GoogleLogin>\n                    </nav>\n                </Toolbar>\n            </AppBar>\n        </Box>\n    ) : (\n        <span></span>\n    );\n};\n\nexport default React.memo(GlobalHeader);\n","import React, { Component } from 'react';\nimport { Container, Box } from '@mui/material';\n\nclass About extends Component {\n    render() {\n        return (\n            <Container maxWidth='sm'>\n                <Box m='auto' textAlign='center'>\n                    <h1>About</h1>\n                </Box>\n            </Container>\n        );\n    }\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport { Container, Box } from '@mui/material';\n\nclass Contact extends Component {\n    render() {\n        return (\n            <Container maxWidth='sm'>\n                <Box m='auto' textAlign='center'>\n                    <h1>Contact</h1>\n                </Box>\n            </Container>\n        );\n    }\n}\n\nexport default Contact;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport firebase from '../firebase';\n\nconst INITIAL_STATE = {\n    resumeData: null,\n    loading: 'idle',\n    openEditorName: null,\n};\n\nexport const getResumeDataByResumeId = createAsyncThunk(\n    'resume/getResumeDataByResumeId',\n    async (resumeId, thunkAPI) => {\n        console.log('calling api');\n        const response = await (await firebase.firestore().collection('resumes').doc(`${resumeId}`).get()).data();\n        return JSON.parse(response.resumeJson);\n    }\n);\n\n// First, create the thunk\nexport const updateResumeDataByResumeId = createAsyncThunk(\n    'resume/updateResumeDataByResumeId',\n    async (apiData, thunkAPI) => {\n        await await firebase\n            .firestore()\n            .collection('resumes')\n            .doc(`${apiData.resumeId}`)\n            .update({ resumeJson: JSON.stringify(apiData.data) });\n        return apiData.data;\n    }\n);\n\nexport const resumeDataSlice = createSlice({\n    name: 'resumeDataSlice',\n    initialState: INITIAL_STATE,\n    reducers: {\n        updateResumeDataReducer: (state, action) => {\n            const data = JSON.parse(JSON.stringify(state.resumeData));\n            data[action.payload.column].filter(item => item.name === action.payload.name)[0].componentData =\n                action.payload.data;\n            state.resumeData = data;\n        },\n\n        updateOpenEditorName: (state, action) => {\n            console.log('calling updateOpenEditorName', action.payload);\n            state.openEditorName = action.payload;\n        },\n    },\n    extraReducers: builder => {\n        builder.addCase(getResumeDataByResumeId.fulfilled, (state, action) => {\n            console.log(action);\n            state.resumeData = action.payload;\n        });\n\n        builder.addCase(updateResumeDataByResumeId.fulfilled, (state, action) => {\n            state.resumeData = action.payload;\n        });\n    },\n});\n\nexport const { updateResumeDataReducer, updateOpenEditorName } = resumeDataSlice.actions;\n\nexport default resumeDataSlice.reducer;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport firebase from '../firebase';\n\nconst INITIAL_STATE = {\n    resumeSettings: null,\n};\n\n// First, create the thunk\nexport const getResumeSettingsByResumeId = createAsyncThunk(\n    'resume/getResumeSettingsByResumeId',\n    async (resumeId, thunkAPI) => {\n        const response = await (await firebase.firestore().collection('resumes').doc(`${resumeId}`).get()).data();\n        return JSON.parse(response.resumeSettings);\n    }\n);\n\n// First, create the thunk\nexport const updateResumeSettingsByResumeId = createAsyncThunk(\n    'resume/updateResumeSettingsByResumeId',\n    async (apiData, thunkAPI) => {\n        await await firebase\n            .firestore()\n            .collection('resumes')\n            .doc(`${apiData.resumeId}`)\n            .update({ resumeSettings: JSON.stringify(apiData.data) });\n        return apiData.data;\n    }\n);\n\nexport const resumeSettingsSlice = createSlice({\n    name: 'resumeSettingsSlice',\n    initialState: INITIAL_STATE,\n    reducers: {\n        updateSettingsDataReducer: (state, action) => {\n            const data = JSON.parse(JSON.stringify(action.payload));\n            state.resumeSettings = data;\n        },\n    },\n    extraReducers: builder => {\n        // Add reducers for additional action types here, and handle loading state as needed\n        builder.addCase(getResumeSettingsByResumeId.fulfilled, (state, action) => {\n            state.resumeSettings = action.payload;\n        });\n\n        builder.addCase(updateResumeSettingsByResumeId.fulfilled, (state, action) => {\n            state.resumeSettings = action.payload;\n        });\n    },\n});\n\nexport const { updateSettingsDataReducer } = resumeSettingsSlice.actions;\n\nexport default resumeSettingsSlice.reducer;\n","export const richEditorSettings = {\n    toolbar: [\n        [{ header: [1, 2, 3, 4, 5, 6, false] }],\n        [{ align: [] }],\n        ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n        [{ list: 'ordered' }, { list: 'bullet' }, { indent: '-1' }, { indent: '+1' }],\n        [{ color: [] }, { background: [] }],\n        ['link', 'image'],\n        ['clean'],\n    ],\n};\n\nexport const initialData = {\n    resumeSettings: {\n        bodyFontSize: 'small',\n        headingFontSize: 'large',\n        subheadingFontSize: 'small',\n        bodyFontColor: '#000000',\n        headingFontColor: '#000000',\n        subheadingFontColor: '#000000',\n        headerBackgroundColor: '#ffffff',\n        mainBackgroundColor: '#ffffff',\n        sidebarBackgroundColor: '#ffffff',\n        sidebarHeadingColor: '#000000',\n        sidebarBodyColor: '#000000',\n        aboutSectionFontColor: '#000000',\n        headingAlignment: 'left',\n        sidebar: true,\n        sidebarPosition: 'right',\n    },\n    resumeJson: {\n        header: [\n            {\n                name: 'BasicInfo',\n                componentType: 'BasicInfo',\n                path: 'BasicInfo/BasicInfo',\n            },\n            {\n                name: 'ProfessionalSummary',\n                componentType: 'ProfessionalSummary',\n                path: 'ProfessionalSummary/ProfessionalSummary',\n                componentData: {\n                    title: 'Professional Summary',\n                    items: [\n                        {\n                            summary: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.',\n                        },\n                    ],\n                    hideTitle: false,\n                },\n            },\n        ],\n        main: [\n            {\n                name: 'Education',\n                componentType: 'Education',\n                path: 'Education/Education',\n                componentData: {\n                    title: 'Education',\n                    items: [\n                        {\n                            title: 'Executive MBA, Engineering Management',\n                            university: 'The University of Arizona',\n                            date: '2010 - 2014',\n                            gpa: 'CGPA 09/10',\n                        },\n                        {\n                            title: 'Engineering Management',\n                            university: 'The University of California, Berkeley',\n                            date: '2008 - 2010',\n                            gpa: 'CGPA 7.5/10',\n                        },\n                    ],\n                },\n            },\n            {\n                name: 'Achievements',\n                componentType: 'Achievements',\n                path: 'Achievements/Achievement',\n                componentData: {\n                    title: 'Achievements',\n                    showIcon: true,\n                    items: [\n                        {\n                            title: 'Won Best Employee Award for last 2 consecutive year (2020 & 2021). Won Best Employee Award for last 2 consecutive year (2020 & 2021).',\n                        },\n                        { title: 'Won inter-zone cricket competition (2020). ' },\n                        {\n                            title: 'Runner up for state level table tennis competition (2020).',\n                        },\n                    ],\n                },\n            },\n            {\n                name: 'Experience',\n                componentType: 'Experience',\n                path: 'Experience/Experience',\n                componentData: {\n                    title: 'Experience',\n                    items: [\n                        {\n                            experienceTitle: 'Android Developer',\n                            company: 'Google',\n                            date: '2018 - 2020',\n                            location: 'New York',\n                            experienceSummary:\n                                'Worked with team of 5 members and provided end-to-end solutions for clients & Lead developer in 3 key projects of major clients.',\n                        },\n                        {\n                            experienceTitle: 'Front End Developer',\n                            company: 'Amazon',\n                            date: '2014 - 2018',\n                            location: 'New York',\n                            experienceSummary:\n                                'Worked with team of 5 members and provided end-to-end solutions for clients & Lead developer in 4 key projects of major clients.',\n                        },\n                    ],\n                },\n            },\n        ],\n        sidebar: [\n            {\n                name: 'Skills',\n                componentType: 'Skills',\n                path: 'Skills/Skills',\n                componentData: {\n                    title: 'Skills',\n                    filled: false,\n                    rounded: true,\n                    items: [{ title: 'HTML' }, { title: 'CSS' }, { title: 'JavaScript' }, { title: 'React' }],\n                },\n            },\n            {\n                name: 'Tools',\n                componentType: 'Skills',\n                path: 'Skills/Skills',\n                componentData: {\n                    title: 'Tools',\n                    filled: false,\n                    rounded: true,\n                    items: [{ title: 'Git' }, { title: 'Webpack' }, { title: 'Gulp' }],\n                },\n            },\n            {\n                name: 'Hobbies',\n                componentType: 'Skills',\n                path: 'Skills/Skills',\n                componentData: {\n                    title: 'Hobbies',\n                    filled: false,\n                    rounded: true,\n                    items: [{ title: 'Reading' }, { title: 'Swimming' }, { title: 'Hiking' }],\n                },\n            },\n            {\n                name: 'Social',\n                componentType: 'Social',\n                path: 'Social/Social',\n                componentData: {\n                    title: 'Social',\n                    items: [\n                        {\n                            socialPlatform: 'Github',\n                            username: '@username',\n                        },\n                        {\n                            socialPlatform: 'LinkedIn',\n                            username: '@username',\n                        },\n                    ],\n                },\n            },\n        ],\n        pageTwo: [],\n        componentLibrary: [\n            {\n                name: 'Languages',\n                componentType: 'Languages',\n                path: 'Languages/Languages',\n                componentData: {\n                    title: 'Languages',\n                    showProficiency: true,\n                    showProficiencyProgress: true,\n                    proficiencyProgressColor: '#09915a',\n                    items: [\n                        { language: 'English', proficiency: 'Proficient' },\n                        { language: 'Hindi', proficiency: 'Native' },\n                        { language: 'Spanish', proficiency: 'Beginner' },\n                    ],\n                },\n            },\n            {\n                name: 'SkillsWithProgress',\n                componentType: 'SkillsWithProgress',\n                path: 'SkillsWithProgress/SkillsWithProgress',\n                componentData: {\n                    title: 'Skills',\n                    showProficiency: true,\n                    showProficiencyProgress: true,\n                    items: [\n                        { title: 'HTML', proficiency: 80 },\n                        { title: 'CSS', proficiency: 80 },\n                        { title: 'Javascript', proficiency: '70' },\n                        { title: 'React', proficiency: 50 },\n                    ],\n                },\n            },\n            {\n                name: 'Divider',\n                componentType: 'Divider',\n                path: 'Divider/Divider',\n                componentData: {\n                    title: 'Divider',\n                    styles: [\n                        {\n                            type: 'select',\n                            label: 'Style',\n                            rule: 'borderStyle',\n                            value: 'double',\n                            unit: '',\n                            options: [\n                                'dotted',\n                                'dashed',\n                                'solid',\n                                'double',\n                                'groove',\n                                'ridge',\n                                'inset',\n                                'outset',\n                                'hidden',\n                            ],\n                        },\n                        { type: 'number', label: 'Width', rule: 'width', value: '100', unit: '%' },\n                        { type: 'number', label: 'Height', rule: 'borderWidth', value: '1', unit: 'px' },\n                        { type: 'number', label: 'Space Above', rule: 'marginTop', value: '15', unit: 'px' },\n                        { type: 'number', label: 'Space Below', rule: 'marginBottom', value: '15', unit: 'px' },\n                    ],\n                },\n            },\n            {\n                name: 'RichText',\n                componentType: 'ProfessionalSummary',\n                path: 'ProfessionalSummary/ProfessionalSummary',\n                componentData: {\n                    title: 'Rich Text',\n                    items: [\n                        {\n                            summary: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.',\n                        },\n                    ],\n                    hideTitle: true,\n                },\n            },\n        ],\n    },\n};\n\nexport const colors = [\n    '#000000',\n    '#ffffff',\n    '#483d8b',\n    '#2D2424',\n    '#2f4f4f',\n    '#bdb76b',\n    '#183141',\n    '#ffd700',\n    '#D9E2E9',\n    '#A0BCC2',\n    '#94AA9E',\n    '#B5282E',\n    '#808000',\n    '#293462',\n    '#FBECD7',\n    '#09915A',\n];\n\nexport const fontSizes = [\n    {\n        value: 'x-small',\n        label: 'XS',\n    },\n    {\n        value: 'small',\n        label: 'S',\n    },\n    {\n        value: 'medium',\n        label: 'M',\n    },\n    {\n        value: 'large',\n        label: 'L',\n    },\n    {\n        value: 'larger',\n        label: 'XL',\n    },\n];\n\nexport const headingAlignment = [\n    {\n        value: 'left',\n        label: 'Left',\n    },\n    {\n        value: 'center',\n        label: 'Center',\n    },\n    {\n        value: 'right',\n        label: 'Right',\n    },\n];\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport firebase from '../firebase';\nimport { initialData } from '../globals';\n\nconst INITIAL_STATE = {\n    userData: null,\n};\n\n// First, create the thunk\nexport const getUserDataByUserId = createAsyncThunk('resume/getUserDataByUserId', async (userId, thunkAPI) => {\n    const response = await (await firebase.firestore().collection('users').doc(userId).get()).data();\n    return response;\n});\n\n// First, create the thunk\nexport const updateUserResumeDataByUserId = createAsyncThunk(\n    'resume/updateUserDataByUserId',\n    async (apiData, thunkAPI) => {\n        await firebase.firestore().collection('users').doc(`${apiData.userId}`).update({\n            userResumes: apiData.data,\n        });\n        return apiData.data;\n    }\n);\n\n// First, create the thunk\nexport const deleteResumeByResumeId = createAsyncThunk('resume/deleteResumeByResumeId', async (resumeId, thunkAPI) => {\n    firebase.firestore().collection('resumes').doc(`${resumeId}`).delete();\n});\n\nexport const copyResumeByResumeId = createAsyncThunk('resume/copyResumeByResumeId', async (apiData, thunkAPI) => {\n    const response = await (await firebase.firestore().collection('resumes').doc(apiData.resumeId).get()).data();\n    await firebase.firestore().collection('resumes').doc(`${apiData.uniqueId}`).set({\n        resumeJson: response.resumeJson,\n        resumeSettings: response.resumeSettings,\n    });\n\n    return JSON.parse(response.resumeJson);\n});\n\n// create the thunk\nexport const createNewReumseByUserId = createAsyncThunk('resume/createNewReumseByUserId', async (apiData, thunkAPI) => {\n    console.log(apiData);\n    const userResumeData = [\n        {\n            resumeName: `Resume ${apiData.data.length + 1}`,\n            resumeId: `${apiData.uniqueId}`,\n            resumeImage: '',\n        },\n    ];\n\n    const newResumesArr = [...apiData.data, ...userResumeData];\n\n    initialData.resumeJson.header.filter(item => item.name === 'BasicInfo')[0].componentData = {\n        fullName: apiData.userData.name,\n        email: apiData.userData.email,\n        website: 'www.example.com',\n        phone: '1234567890',\n        address: '123, ABC Street, XYZ City, ABC State, 123456',\n    };\n    await firebase\n        .firestore()\n        .collection('resumes')\n        .doc(`${apiData.uniqueId}`)\n        .set({\n            resumeJson: JSON.stringify(initialData.resumeJson),\n            resumeSettings: JSON.stringify(initialData.resumeSettings),\n        });\n    await await firebase\n        .firestore()\n        .collection('users')\n        .doc(apiData.userData.userId)\n        .update({ userResumes: JSON.stringify(newResumesArr) });\n    return newResumesArr;\n});\n\nexport const userDataSlice = createSlice({\n    name: 'userDataSlice',\n    initialState: INITIAL_STATE,\n    reducers: {\n        updateUserDataReducer: (state, action) => {\n            const data = JSON.parse(JSON.stringify(state.userData));\n            state.userData = data;\n        },\n    },\n    extraReducers: builder => {\n        // Add reducers for additional action types here, and handle loading state as needed\n        builder.addCase(getUserDataByUserId.fulfilled, (state, action) => {\n            state.userData = action.payload;\n        });\n\n        builder.addCase(createNewReumseByUserId.fulfilled, (state, action) => {\n            state.userData.userResumes = action.payload;\n        });\n\n        builder.addCase(updateUserResumeDataByUserId.fulfilled, (state, action) => {\n            state.userData.userResumes = action.payload;\n        });\n    },\n});\n\nexport const { updateUserDataReducer } = userDataSlice.actions;\n\nexport default userDataSlice.reducer;\n","import React, { useState } from 'react';\nimport { Button } from '@mui/material';\nimport { GithubPicker } from 'react-color';\nimport { fontSizes, colors } from '../../globals.js';\nimport FormatAlignLeftOutlinedIcon from '@mui/icons-material/FormatAlignLeftOutlined';\nimport FormatAlignCenterOutlinedIcon from '@mui/icons-material/FormatAlignCenterOutlined';\nimport FormatAlignRightOutlinedIcon from '@mui/icons-material/FormatAlignRightOutlined';\n\nimport './GlobalResumeSetting.css';\nimport { Box } from '@mui/system';\n\nconst GlobalResumeSetting = props => {\n    const [colorsToggles, setColorsToggles] = useState({\n        headerFontColorToggle: false,\n        headingFontColorToggle: false,\n        subheadingFontColorToggle: false,\n        bodyFontToggle: false,\n        headerBackgroundColorToggle: false,\n        sidebarBackgroundColorToogle: false,\n        sidebarHeadingColorToggle: false,\n        mainBackgroundColorToggle: false,\n    });\n\n    const closeEditor = () => {\n        props.openEditorSection();\n    };\n\n    const changeFontColor = (property, color) => {\n        const root = document.querySelector(':root');\n        root.style.setProperty(property, color);\n    };\n\n    const changeAboutSectionFontColor = color => {\n        props.setResumeSettings({ ...props.resumeSettings, aboutSectionFontColor: color.hex });\n        openColorToggle('headerFontColorToggle');\n        changeFontColor('--color-font-about-section', color.hex);\n    };\n\n    const changeHeadingFontColor = color => {\n        props.setResumeSettings({ ...props.resumeSettings, headingFontColor: color.hex });\n        changeFontColor('--color-font-heading', color.hex);\n        openColorToggle('headingFontColorToggle');\n    };\n\n    const changeSubheadingFontColor = color => {\n        props.setResumeSettings({ ...props.resumeSettings, subheadingFontColor: color.hex });\n        changeFontColor('--color-font-subheading', color.hex);\n        openColorToggle('subheadingFontColorToggle');\n    };\n\n    const changeBodyFontColor = color => {\n        props.setResumeSettings({ ...props.resumeSettings, bodyFontColor: color.hex });\n        changeFontColor('--color-font-body', color.hex);\n        openColorToggle('bodyFontColorToggle');\n    };\n\n    const changeHeaderBackgroundColor = color => {\n        props.setResumeSettings({ ...props.resumeSettings, headerBackgroundColor: color.hex });\n        openColorToggle('headerBackgroundColorToggle');\n    };\n\n    const changeSidebarBackgroundColor = color => {\n        props.setResumeSettings({ ...props.resumeSettings, sidebarBackgroundColor: color.hex });\n        openColorToggle('sidebarBackgroundColorToggle');\n    };\n\n    const changeSidebarBodyColor = color => {\n        props.setResumeSettings({ ...props.resumeSettings, sidebarBodyColor: color.hex });\n        changeFontColor('--color-sidebar-body', color.hex);\n        openColorToggle('sidebarBodyColorToggle');\n    };\n\n    const changeSidebarHeadingColor = color => {\n        props.setResumeSettings({ ...props.resumeSettings, sidebarHeadingColor: color.hex });\n        changeFontColor('--color-sidebar-heading', color.hex);\n        openColorToggle('sidebarHeadingColorToggle');\n    };\n\n    const changeMainBackgroundColor = color => {\n        props.setResumeSettings({ ...props.resumeSettings, mainBackgroundColor: color.hex });\n        openColorToggle('mainBackgroundColorToggle');\n    };\n\n    const changeHeadingFont = (e, size) => {\n        props.setResumeSettings({ ...props.resumeSettings, headingFontSize: size });\n    };\n\n    const changeSubheadingFont = (e, size) => {\n        props.setResumeSettings({ ...props.resumeSettings, subheadingFontSize: size });\n    };\n\n    const changeBodyFont = (e, size) => {\n        props.setResumeSettings({ ...props.resumeSettings, bodyFontSize: size });\n    };\n\n    const changeHeadingAlignment = (e, alignment) => {\n        props.setResumeSettings({ ...props.resumeSettings, headingAlignment: alignment });\n    };\n\n    const onSave = () => {\n        props.updateGlobalSetting(props.resumeSettings);\n        closeEditor();\n    };\n\n    const openColorToggle = colorToggleProp => {\n        setColorsToggles({ ...colorsToggles, [colorToggleProp]: !colorsToggles[colorToggleProp] });\n    };\n\n    const changeSidebarPosition = (e, position) => {\n        props.setResumeSettings({ ...props.resumeSettings, sidebarPosition: position });\n    };\n\n    return (\n        <div className='resume-setting-wrap'>\n            <div className='resume-setting-section-header'>\n                <Button size='small' variant='contained' onClick={onSave}>\n                    Save Changes\n                </Button>\n                <Button size='small' variant='outlined' onClick={closeEditor}>\n                    Close\n                </Button>\n            </div>\n\n            <div className='resume-setting-section'>\n                {/* ABOUT SECTION SETTING */}\n                <div className='resume-setting-heading'>\n                    <span>Resume Header Section</span>\n                </div>\n                <div className='resume-setting-item'>\n                    <span className='resume-setting-item-label'>\n                        Font Color\n                        <Box\n                            className='resume-setting-selected-color'\n                            onClick={() => {\n                                openColorToggle('headerFontColorToggle');\n                            }}\n                            sx={{ backgroundColor: props.resumeSettings.aboutSectionFontColor }}\n                        ></Box>\n                    </span>\n                    <div\n                        className={`resume-setting-item-body ${\n                            colorsToggles.headerFontColorToggle === true ? '' : 'd-none'\n                        }`}\n                    >\n                        <GithubPicker\n                            color={props.resumeSettings.aboutSectionFontColor}\n                            onChangeComplete={changeAboutSectionFontColor}\n                            colors={colors}\n                            triangle='hide'\n                        />\n                    </div>\n                </div>\n\n                <div className='resume-setting-item'>\n                    <span className='resume-setting-item-label'>\n                        Background Color\n                        <Box\n                            className='resume-setting-selected-color'\n                            onClick={() => {\n                                openColorToggle('headerBackgroundColorToggle');\n                            }}\n                            sx={{ backgroundColor: props.resumeSettings.headerBackgroundColor }}\n                        ></Box>\n                    </span>\n                    <div\n                        className={`resume-setting-item-body ${\n                            colorsToggles.headerBackgroundColorToggle === true ? '' : 'd-none'\n                        }`}\n                    >\n                        <GithubPicker\n                            color={props.resumeSettings.headerBackgroundColor}\n                            onChangeComplete={changeHeaderBackgroundColor}\n                            colors={colors}\n                            triangle='hide'\n                        />\n                    </div>\n                </div>\n            </div>\n\n            <div className='resume-setting-section'>\n                <div className='resume-setting-heading'>\n                    <span>Resume Main Section</span>\n                </div>\n                <div className='resume-setting-item'>\n                    <span className='resume-setting-item-label'>\n                        Heading Font Color\n                        <Box\n                            className='resume-setting-selected-color'\n                            onClick={() => {\n                                openColorToggle('headingFontColorToggle');\n                            }}\n                            sx={{ backgroundColor: props.resumeSettings.headingFontColor }}\n                        ></Box>\n                    </span>\n                    <div\n                        className={`resume-setting-item-body ${\n                            colorsToggles.headingFontColorToggle === true ? '' : 'd-none'\n                        }`}\n                    >\n                        <GithubPicker\n                            color={props.resumeSettings.headingFontColor}\n                            onChangeComplete={changeHeadingFontColor}\n                            colors={colors}\n                            triangle='hide'\n                        />\n                    </div>\n                </div>\n\n                <div className='resume-setting-item'>\n                    <span className='resume-setting-item-label'>\n                        Body Font Color\n                        <Box\n                            className='resume-setting-selected-color'\n                            onClick={() => {\n                                openColorToggle('bodyFontColorToggle');\n                            }}\n                            sx={{ backgroundColor: props.resumeSettings.bodyFontColor }}\n                        ></Box>\n                    </span>\n                    <div\n                        className={`resume-setting-item-body ${\n                            colorsToggles.bodyFontColorToggle === true ? '' : 'd-none'\n                        }`}\n                    >\n                        <GithubPicker\n                            color={props.resumeSettings.bodyFontColor}\n                            onChangeComplete={changeBodyFontColor}\n                            colors={colors}\n                            triangle='hide'\n                        />\n                    </div>\n                </div>\n\n                <div className='resume-setting-item'>\n                    <span className='resume-setting-item-label'>\n                        Background Color\n                        <Box\n                            className='resume-setting-selected-color'\n                            onClick={() => {\n                                openColorToggle('mainBackgroundColorToggle');\n                            }}\n                            sx={{ backgroundColor: props.resumeSettings.mainBackgroundColor }}\n                        ></Box>\n                    </span>\n                    <div\n                        className={`resume-setting-item-body ${\n                            colorsToggles.mainBackgroundColorToggle === true ? '' : 'd-none'\n                        }`}\n                    >\n                        <GithubPicker\n                            color={props.resumeSettings.mainBackgroundColor}\n                            onChangeComplete={changeMainBackgroundColor}\n                            colors={colors}\n                            triangle='hide'\n                        />\n                    </div>\n                </div>\n            </div>\n\n            <div className='resume-setting-section'>\n                <div className='resume-setting-heading'>\n                    <span>Resume Sidebar Section</span>\n                </div>\n\n                <div className='resume-setting-item'>\n                    <span className='resume-setting-item-label'>\n                        Heading Font Color\n                        <Box\n                            className='resume-setting-selected-color'\n                            onClick={() => {\n                                openColorToggle('sidebarHeadingColorToggle');\n                            }}\n                            sx={{ backgroundColor: props.resumeSettings.sidebarHeadingColor }}\n                        ></Box>\n                    </span>\n                    <div\n                        className={`resume-setting-item-body ${\n                            colorsToggles.sidebarHeadingColorToggle === true ? '' : 'd-none'\n                        }`}\n                    >\n                        <GithubPicker\n                            color={props.resumeSettings.sidebarHeadingColor}\n                            onChangeComplete={changeSidebarHeadingColor}\n                            colors={colors}\n                            triangle='hide'\n                        />\n                    </div>\n                </div>\n\n                <div className='resume-setting-item'>\n                    <span className='resume-setting-item-label'>\n                        Body Font Color\n                        <Box\n                            className='resume-setting-selected-color'\n                            onClick={() => {\n                                openColorToggle('sidebarBodyColorToggle');\n                            }}\n                            sx={{ backgroundColor: props.resumeSettings.sidebarBodyColor }}\n                        ></Box>\n                    </span>\n                    <div\n                        className={`resume-setting-item-body ${\n                            colorsToggles.sidebarBodyColorToggle === true ? '' : 'd-none'\n                        }`}\n                    >\n                        <GithubPicker\n                            color={props.resumeSettings.sidebarBodyColor}\n                            onChangeComplete={changeSidebarBodyColor}\n                            colors={colors}\n                            triangle='hide'\n                        />\n                    </div>\n                </div>\n\n                <div className='resume-setting-item'>\n                    <span className='resume-setting-item-label'>\n                        Background Color\n                        <Box\n                            className='resume-setting-selected-color'\n                            onClick={() => {\n                                openColorToggle('sidebarBackgroundColorToggle');\n                            }}\n                            sx={{ backgroundColor: props.resumeSettings.sidebarBackgroundColor }}\n                        ></Box>\n                    </span>\n                    <div\n                        className={`resume-setting-item-body ${\n                            colorsToggles.sidebarBackgroundColorToggle === true ? '' : 'd-none'\n                        }`}\n                    >\n                        <GithubPicker\n                            color={props.resumeSettings.sidebarBackgroundColor}\n                            onChangeComplete={changeSidebarBackgroundColor}\n                            colors={colors}\n                            triangle='hide'\n                        />\n                    </div>\n                </div>\n\n                <div className='resume-setting-item'>\n                    <span className='resume-setting-item-label'>Sidebar Position</span>\n                    <div className='resume-setting-item-body'>\n                        <div\n                            className={`font-size-div ${\n                                props.resumeSettings.sidebarPosition === 'left' ? 'active' : ''\n                            }`}\n                            onClick={event => changeSidebarPosition(event, 'left')}\n                        >\n                            Left\n                        </div>\n                        <div\n                            className={`font-size-div ${\n                                props.resumeSettings.sidebarPosition === 'right' ? 'active' : ''\n                            }`}\n                            onClick={event => changeSidebarPosition(event, 'right')}\n                        >\n                            Right\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div className='resume-setting-section'>\n                <div className='resume-setting-heading'>\n                    <span>Font Sizes</span>\n                </div>\n                <div className='resume-setting-item'>\n                    <span className='resume-setting-item-label'>Heading Font Size</span>\n                    <div className='resume-setting-item-body'>\n                        {fontSizes.map((font, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    className={`font-size-div ${\n                                        props.resumeSettings.headingFontSize === font.value ? 'active' : ''\n                                    }`}\n                                    onClick={event => changeHeadingFont(event, font.value)}\n                                >\n                                    {font.label}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n\n                <div className='resume-setting-item'>\n                    <span className='resume-setting-item-label'>SubHeading Font Size</span>\n                    <div className='resume-setting-item-body'>\n                        {fontSizes.map((font, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    className={`font-size-div ${\n                                        props.resumeSettings.subheadingFontSize === font.value ? 'active' : ''\n                                    }`}\n                                    onClick={event => changeSubheadingFont(event, font.value)}\n                                >\n                                    {font.label}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n\n                <div className='resume-setting-item'>\n                    <span className='resume-setting-item-label'>Body Font Size</span>\n                    <div className='resume-setting-item-body'>\n                        {fontSizes.map((font, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    className={`font-size-div ${\n                                        props.resumeSettings.bodyFontSize === font.value ? 'active' : ''\n                                    }`}\n                                    onClick={event => changeBodyFont(event, font.value)}\n                                >\n                                    {font.label}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n\n            <div className='resume-setting-section'>\n                <div className='resume-setting-heading'>\n                    <span>Heading Styles</span>\n                </div>\n                <div className='resume-setting-item'>\n                    <span className='resume-setting-item-label'>Heading Alignment</span>\n                    <div className='resume-setting-item-body'>\n                        <div\n                            className={`heading-alignment-div ${\n                                props.resumeSettings.headingAlignment === 'left' ? 'active' : ''\n                            }`}\n                            onClick={event => changeHeadingAlignment(event, 'left')}\n                        >\n                            <FormatAlignLeftOutlinedIcon></FormatAlignLeftOutlinedIcon>\n                        </div>\n\n                        <div\n                            className={`heading-alignment-div ${\n                                props.resumeSettings.headingAlignment === 'center' ? 'active' : ''\n                            }`}\n                            onClick={event => changeHeadingAlignment(event, 'center')}\n                        >\n                            <FormatAlignCenterOutlinedIcon></FormatAlignCenterOutlinedIcon>\n                        </div>\n\n                        <div\n                            className={`heading-alignment-div ${\n                                props.resumeSettings.headingAlignment === 'right' ? 'active' : ''\n                            }`}\n                            onClick={event => changeHeadingAlignment(event, 'right')}\n                        >\n                            <FormatAlignRightOutlinedIcon></FormatAlignRightOutlinedIcon>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {/* \n          <div className=\"resume-setting-section\">\n            <div className=\"resume-setting-heading\">\n              <span>Font Sizes</span>\n            </div>\n            <div className=\"resume-setting-item\">\n              <span className=\"resume-setting-item-label\">Heading Font Size</span>\n              <div className=\"resume-setting-item-body\">\n                {fontSizes.map((font, index) => {\n                  return (\n                    <div key={index} className={`font-size-div ${props.resumeSettings.headingFontSize === font.value ? 'active' : ''}`} onClick={(event) => changeHeadingFont(event, font.value)}>{font.label}</div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div className=\"resume-setting-item\">\n              <span className=\"resume-setting-item-label\">\n                Font Color\n                <Box className=\"resume-setting-selected-color\" onClick={() => { openColorToggle('headingFontColorToggle'); }} sx={{backgroundColor: props.resumeSettings.headingFontColor}}></Box>\n              </span>\n              <div className={`resume-setting-item-body ${colorsToggles.headingFontColorToggle === true ? '' : 'd-none'}`}>\n                <GithubPicker color={ props.resumeSettings.headingFontColor } onChangeComplete={changeHeadingFontColor} colors={colors} triangle=\"hide\" />\n              </div>\n            </div>\n\n\n            <div className=\"resume-setting-item\">\n              <span className=\"resume-setting-item-label\">\n                Heading Alignment\n              </span>\n              <div className=\"resume-setting-item-body\">\n                  <div className={`heading-alignment-div ${props.resumeSettings.headingAlignment === 'left' ? 'active' : ''}`} onClick={(event) => changeHeadingAlignment(event, 'left')}>\n                    <FormatAlignLeftOutlinedIcon></FormatAlignLeftOutlinedIcon>\n                  </div>\n\n                  <div className={`heading-alignment-div ${props.resumeSettings.headingAlignment === 'center' ? 'active' : ''}`} onClick={(event) => changeHeadingAlignment(event, 'center')}>\n                    <FormatAlignCenterOutlinedIcon></FormatAlignCenterOutlinedIcon>\n                  </div>\n\n                  <div className={`heading-alignment-div ${props.resumeSettings.headingAlignment === 'right' ? 'active' : ''}`} onClick={(event) => changeHeadingAlignment(event, 'right')}>\n                    <FormatAlignRightOutlinedIcon></FormatAlignRightOutlinedIcon>\n                  </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"resume-setting-section\">\n            <div className=\"resume-setting-heading\">\n              <span>Subheading</span>\n            </div>\n            <div className=\"resume-setting-item\">\n              <span className=\"resume-setting-item-label\">Font Size</span>\n              <div className=\"resume-setting-item-body\">\n                {fontSizes.map((font, index) => {\n                  return (\n                    <div key={index} className={`font-size-div ${props.resumeSettings.subheadingFontSize === font.value ? 'active' : ''}`} onClick={(event) => changeSubheadingFont(event, font.value)}>{font.label}</div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div className=\"resume-setting-item\">\n              <span className=\"resume-setting-item-label\">\n                Font Color\n                <Box className=\"resume-setting-selected-color\" onClick={() => { openColorToggle('subheadingFontColorToggle'); }} sx={{backgroundColor: props.resumeSettings.subheadingFontColor}}></Box>\n              </span>\n              <div className={`resume-setting-item-body ${colorsToggles.subheadingFontColorToggle === true ? '' : 'd-none'}`}>\n                <GithubPicker color={props.resumeSettings.subheadingFontColor} onChangeComplete={changeSubheadingFontColor} colors={colors} triangle=\"hide\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"resume-setting-section\">\n            <div className=\"resume-setting-heading\">\n              <span>Body</span>\n            </div>\n            <div className=\"resume-setting-item\">\n              <span className=\"resume-setting-item-label\">Font Size</span>\n              <div className=\"resume-setting-item-body\">\n                {fontSizes.map((font, index) => {\n                  return (\n                    <div key={index} className={`font-size-div ${props.resumeSettings.bodyFontSize === font.value ? 'active' : ''}`} onClick={(event) => changeBodyFont(event, font.value)}>{font.label}</div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div className=\"resume-setting-item\">\n              <span className=\"resume-setting-item-label\">\n                Font Color\n                <Box className=\"resume-setting-selected-color\" onClick={() => { openColorToggle('bodyFontColorToggle'); }} sx={{backgroundColor: props.resumeSettings.bodyFontColor}}></Box>\n              </span>\n              <div className={`resume-setting-item-body ${colorsToggles.bodyFontColorToggle === true ? '' : 'd-none'}`}>\n                <GithubPicker color={props.bodyFontColor} onChangeComplete={changeBodyFontColor} colors={colors} triangle=\"hide\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"resume-setting-heading\">\n            <span>Backgrounds</span>\n          </div>\n          <div className=\"resume-setting-section\">\n            <div className=\"resume-setting-item\">\n              <span className=\"resume-setting-item-label\">\n                Sidebar Background Color \n                <Box className=\"resume-setting-selected-color\" onClick={() => { openColorToggle('sidebarBackgroundColorToggle'); }} sx={{backgroundColor: props.resumeSettings.sidebarBackgroundColor}}></Box>\n              </span>\n              <div className={`resume-setting-item-body ${colorsToggles.sidebarBackgroundColorToggle === true ? '' : 'd-none'}`}>\n                <GithubPicker color={props.resumeSettings.sidebarBackgroundColor} onChangeComplete={changeSidebarBackgroundColor} colors={colors} triangle=\"hide\" />\n              </div>\n            </div>\n          </div> */}\n        </div>\n    );\n};\n\nexport default React.memo(GlobalResumeSetting);\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { TextField, Button, Switch } from '@mui/material';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport { useDispatch } from 'react-redux';\nimport { updateResumeDataReducer, updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nconst AchievementEditor = props => {\n    const [editorData, setEditorData] = useState(props.editorData);\n    const dispatch = useDispatch();\n\n    const onWidgetDataChange = (key, newValue) => {\n        const newData = { ...editorData, [key]: newValue };\n        setEditorData(newData);\n        props.setWidgetData(newData);\n    };\n\n    const onTitleChange = event => {\n        const newVal = event.target.value;\n        onWidgetDataChange('title', newVal);\n    };\n\n    const onShowIconChange = event => {\n        onWidgetDataChange('showIcon', event.target.checked);\n    };\n\n    const onAchievementChange = (event, index) => {\n        let skills = [...editorData.items];\n        skills[index] = { title: event.target.value };\n        onWidgetDataChange('items', skills);\n    };\n\n    const onAddAchievement = (event, index) => {\n        let skills = [...editorData.items];\n        skills.splice(index + 1, 0, { title: '' });\n        onWidgetDataChange('items', skills);\n    };\n    const onDeleteAchievement = (event, index) => {\n        let skills = [...editorData.items];\n        skills.splice(index, 1);\n        onWidgetDataChange('items', skills);\n    };\n\n    const onSave = event => {\n        const newData = { ...editorData };\n        dispatch(updateResumeDataReducer({ name: props.componentName, column: props.componentColumn, data: newData }));\n        closeEditor();\n        console.log(editorData);\n    };\n\n    const closeEditor = () => {\n        dispatch(updateOpenEditorName(null));\n        props.setOpen(false);\n    };\n\n    return ReactDOM.createPortal(\n        <div className='editor-wrap'>\n            <div className='editor-section-header'>\n                <Button\n                    variant='contained'\n                    size='small'\n                    onClick={onSave}\n                    disabled={!editorData.items.filter(item => item.title.length > 0).length}\n                >\n                    Save Changes\n                </Button>\n                <Button variant='outlined' size='small' onClick={closeEditor}>\n                    Close\n                </Button>\n            </div>\n            <div className='editor-heading-wrap'>\n                <TextField\n                    label='Title'\n                    fullWidth\n                    autoComplete='off'\n                    onChange={onTitleChange}\n                    value={editorData.title}\n                    variant='standard'\n                />\n            </div>\n\n            <div className='editor-options-wrap'>\n                <div>\n                    Show Icon: <Switch label='Rounded' onChange={onShowIconChange} checked={editorData.showIcon} />\n                </div>\n            </div>\n\n            <div className='editor-items-wrap'>\n                {editorData.items.map((item, index) => {\n                    return (\n                        <div className='editor-item' key={index}>\n                            <TextField\n                                label={'Option ' + (index + 1)}\n                                sx={{ mb: 1, mt: 1, mr: 1 }}\n                                onChange={event => onAchievementChange(event, index)}\n                                value={item.title}\n                                data-key={index}\n                                multiline\n                                rows={2}\n                                inputProps={{ style: { fontSize: 14, lineHeight: 1.2 } }}\n                                style={{ width: 380 }}\n                            />\n                            <AddCircleIcon\n                                onClick={event => onAddAchievement(event, index)}\n                                className='add-item-icon'\n                            ></AddCircleIcon>\n                            <DeleteForeverIcon\n                                onClick={event => onDeleteAchievement(event, index)}\n                                className={`delete-item-icon ${index === 0 ? 'd-none' : ''}`}\n                            ></DeleteForeverIcon>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>,\n        document.getElementById('editorPortal')\n    );\n};\n\nexport default AchievementEditor;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nimport StarIcon from '@mui/icons-material/Star';\nimport EditIcon from '@mui/icons-material/Edit';\nimport AchievementEditor from './AchievementEditor';\n\nimport './Achievement.css';\n\nconst Achievement = props => {\n    const [open, setOpen] = useState(false);\n    console.log('calling achievment', open);\n\n    const [widgetData, setWidgetData] = useState(props.componentItem.componentData);\n\n    const dispatch = useDispatch();\n    const openEditorName = useSelector(state => state.resumeDataReducer.openEditorName);\n\n    const openEditor = () => {\n        dispatch(updateOpenEditorName(props.componentItem.name));\n        setOpen(true);\n    };\n\n    return (\n        <div className='resume-section resume-section-achievement'>\n            <div className='resume-section-title'>\n                <span>{widgetData.title}</span>\n                <span className='edit-component-icon'>\n                    <EditIcon titleAccess='Edit' onClick={openEditor} />\n                </span>\n            </div>\n\n            <div className='achievement-item-wrap'>\n                {widgetData.items.map((item, index) => {\n                    return (\n                        <div key={`achievement-${index}`} className='achievement-item'>\n                            <span className={`achievement-icon ${widgetData.showIcon ? '' : 'd-none'}`}>\n                                <StarIcon />\n                            </span>\n                            <span className='achievement-summary'>{item.title}</span>\n                        </div>\n                    );\n                })}\n            </div>\n\n            {openEditorName === props.componentItem.name ? (\n                <AchievementEditor\n                    setWidgetData={setWidgetData}\n                    open={open}\n                    setOpen={setOpen}\n                    componentColumn={props.componentColumn}\n                    componentName={props.componentItem.name}\n                    editorData={widgetData}\n                />\n            ) : null}\n        </div>\n    );\n};\n\nexport default React.memo(Achievement);\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { TextField, Button } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { updateResumeDataReducer, updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nconst BasicInfoEditor = props => {\n    const [editorData, setEditorData] = useState(props.editorData);\n    const dispatch = useDispatch();\n\n    const onWidgetDataChange = (key, newValue) => {\n        const newData = { ...editorData, [key]: newValue };\n        setEditorData(newData);\n        props.setWidgetData(newData);\n    };\n\n    const onDataChange = (event, property) => {\n        onWidgetDataChange(property, event.target.value);\n    };\n\n    const onSave = event => {\n        const newData = { ...editorData };\n        dispatch(updateResumeDataReducer({ name: props.componentName, column: props.componentColumn, data: newData }));\n        closeEditor();\n    };\n\n    const closeEditor = () => {\n        dispatch(updateOpenEditorName(null));\n        props.setOpen(false);\n    };\n\n    return ReactDOM.createPortal(\n        <div className='editor-wrap'>\n            <div className='editor-section-header'>\n                <Button variant='contained' size='small' onClick={onSave}>\n                    Save Changes\n                </Button>\n                <Button variant='outlined' size='small' onClick={closeEditor}>\n                    Close\n                </Button>\n            </div>\n            <div className='editor-heading-wrap'>\n                <TextField fullWidth readOnly autoComplete='off' value='Basic Info' variant='standard' />\n            </div>\n            <div className='editor-items-wrap'>\n                <div className='editor-item'>\n                    <div>\n                        <div>\n                            <TextField\n                                label='Full Name'\n                                sx={{ mb: 1, mt: 1, mr: 1 }}\n                                onChange={event => onDataChange(event, 'fullName')}\n                                value={editorData.fullName}\n                                inputProps={{ style: { fontSize: 14, width: 240 } }}\n                                size='small'\n                            />\n                        </div>\n                        <div>\n                            <TextField\n                                label='Current Role/Designation'\n                                sx={{ mb: 1, mt: 1, mr: 1 }}\n                                onChange={event => onDataChange(event, 'currentRole')}\n                                value={editorData.currentRole}\n                                inputProps={{ style: { fontSize: 14, width: 240 } }}\n                                size='small'\n                            />\n                        </div>\n                        <div>\n                            <TextField\n                                label='Email'\n                                sx={{ mb: 1, mt: 1, mr: 1 }}\n                                onChange={event => onDataChange(event, 'email')}\n                                value={editorData.email}\n                                inputProps={{ style: { fontSize: 14, width: 240 } }}\n                                size='small'\n                            />\n                        </div>\n                        <div>\n                            <TextField\n                                label='Phone'\n                                sx={{ mb: 1, mt: 1, mr: 1 }}\n                                onChange={event => onDataChange(event, 'phone')}\n                                value={editorData.phone}\n                                inputProps={{ style: { fontSize: 14, width: 240 } }}\n                                size='small'\n                            />\n                        </div>\n                        <div>\n                            <TextField\n                                label='Website'\n                                sx={{ mb: 1, mt: 1, mr: 1 }}\n                                onChange={event => onDataChange(event, 'website')}\n                                value={editorData.website}\n                                inputProps={{ style: { fontSize: 14, width: 240 } }}\n                                size='small'\n                            />\n                        </div>\n                        <div>\n                            <TextField\n                                label='Address'\n                                sx={{ mb: 1, mt: 1, mr: 1 }}\n                                onChange={event => onDataChange(event, 'address')}\n                                value={editorData.address}\n                                inputProps={{ style: { fontSize: 14, width: 240 } }}\n                                size='small'\n                                multiline\n                                rows={3}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>,\n        document.getElementById('editorPortal')\n    );\n};\n\nexport default BasicInfoEditor;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nimport { Grid, Box } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport PhoneIcon from '@mui/icons-material/Phone';\nimport MailIcon from '@mui/icons-material/Mail';\nimport LanguageIcon from '@mui/icons-material/Language';\nimport HomeIcon from '@mui/icons-material/Home';\nimport EditIcon from '@mui/icons-material/Edit';\n\nimport BasicInfoEditor from './BasicInfoEditor';\n\nimport './BasicInfo.css';\n\nconst Item = styled(Box)(({ theme }) => ({\n    ...theme.typography.caption,\n    textAlign: 'left',\n    display: 'flex',\n    alignItems: 'center',\n}));\n\nconst BasicInfo = props => {\n    const [open, setOpen] = useState(false);\n    const [widgetData, setWidgetData] = useState(props.componentItem.componentData);\n\n    const dispatch = useDispatch();\n    const openEditorName = useSelector(state => state.resumeDataReducer.openEditorName);\n\n    const openEditor = () => {\n        dispatch(updateOpenEditorName(props.componentItem.name));\n        setOpen(true);\n    };\n    return (\n        <div className='resume-section resume-section-basic-info'>\n            <div className='basic-section-title'>\n                <span className='basic-info name'>{widgetData.fullName}</span>\n                <span className='edit-component-icon'>\n                    <EditIcon titleAccess='Edit' onClick={openEditor} />\n                </span>\n            </div>\n            <p className='basic-info current-role'>{widgetData.currentRole}</p>\n            <div>\n                <Grid\n                    mt={1}\n                    container\n                    justifyContent='left'\n                    alignItems='center'\n                    rowSpacing={0.5}\n                    columnSpacing={{ xs: 0.5, sm: 0.5, md: 0.5 }}\n                >\n                    {widgetData.phone && (\n                        <Grid item xs={6}>\n                            <Item>\n                                <PhoneIcon fontSize='15'></PhoneIcon>\n                                <Box component='span' sx={{ pl: 1 }}>\n                                    {widgetData.phone}\n                                </Box>\n                            </Item>\n                        </Grid>\n                    )}\n                    {widgetData.email && (\n                        <Grid item xs={6}>\n                            <Item>\n                                <MailIcon fontSize='15'></MailIcon>\n                                <Box component='span' sx={{ pl: 1 }}>\n                                    {widgetData.email}\n                                </Box>\n                            </Item>\n                        </Grid>\n                    )}\n                    {widgetData.website && (\n                        <Grid item xs={6}>\n                            <Item>\n                                <LanguageIcon fontSize='15'></LanguageIcon>\n                                <Box component='span' sx={{ pl: 1 }}>\n                                    {widgetData.website}\n                                </Box>\n                            </Item>\n                        </Grid>\n                    )}\n                    {widgetData.address && (\n                        <Grid item xs={6}>\n                            <Item>\n                                <HomeIcon fontSize='15'></HomeIcon>\n                                <Box component='span' sx={{ pl: 1 }}>\n                                    {widgetData.address}\n                                </Box>\n                            </Item>\n                        </Grid>\n                    )}\n                </Grid>\n            </div>\n\n            {openEditorName === props.componentItem.name ? (\n                <BasicInfoEditor\n                    setWidgetData={setWidgetData}\n                    open={open}\n                    setOpen={setOpen}\n                    componentColumn={props.componentColumn}\n                    componentName={props.componentItem.name}\n                    editorData={widgetData}\n                />\n            ) : null}\n        </div>\n    );\n};\n\nexport default React.memo(BasicInfo);\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { TextField, Button, Divider, Box } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { updateResumeDataReducer, updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\n\nconst EducationEditor = props => {\n    const [editorData, setEditorData] = useState(props.editorData);\n    const dispatch = useDispatch();\n\n    const onWidgetDataChange = (key, newValue) => {\n        const newData = { ...editorData, [key]: newValue };\n        setEditorData(newData);\n        props.setWidgetData(newData);\n    };\n\n    const onTitleChange = event => {\n        const newVal = event.target.value;\n        onWidgetDataChange('title', newVal);\n    };\n\n    const onEducationTitleChange = (event, index) => {\n        const newTitle = event.target.value;\n        let newEducationItems = [...editorData.items];\n        newEducationItems[index] = { ...newEducationItems[index], title: newTitle };\n        onWidgetDataChange('items', newEducationItems);\n    };\n\n    const onUniversityChange = (event, index) => {\n        const newUniversity = event.target.value;\n        let newEducationItems = [...editorData.items];\n        newEducationItems[index] = { ...newEducationItems[index], university: newUniversity };\n        onWidgetDataChange('items', newEducationItems);\n    };\n\n    const onDateChange = (event, index) => {\n        const newDate = event.target.value;\n        let newEducationItems = [...editorData.items];\n        newEducationItems[index] = { ...newEducationItems[index], date: newDate };\n        onWidgetDataChange('items', newEducationItems);\n    };\n\n    const onGpaChange = (event, index) => {\n        const newGPA = event.target.value;\n        let newEducationItems = [...editorData.items];\n        newEducationItems[index] = { ...newEducationItems[index], gpa: newGPA };\n        onWidgetDataChange('items', newEducationItems);\n    };\n\n    const onAddEducation = (event, index) => {\n        let newEducationItems = [...editorData.items];\n        newEducationItems.splice(index + 1, 0, { title: '', university: '', date: '', gpa: '' });\n        onWidgetDataChange('items', newEducationItems);\n    };\n    const onDeleteEducation = (event, index) => {\n        let newEducationItems = [...editorData.items];\n        newEducationItems.splice(index, 1);\n        onWidgetDataChange('items', newEducationItems);\n    };\n\n    const onSave = event => {\n        const newData = { ...editorData, items: editorData.items.filter((item, index) => item.title.length > 0) };\n        dispatch(updateResumeDataReducer({ name: props.componentName, column: props.componentColumn, data: newData }));\n        closeEditor();\n        console.log(editorData);\n    };\n\n    const closeEditor = () => {\n        dispatch(updateOpenEditorName(null));\n        props.setOpen(false);\n    };\n\n    return ReactDOM.createPortal(\n        <div className='editor-wrap'>\n            <div className='editor-section-header'>\n                <Button\n                    variant='contained'\n                    size='small'\n                    onClick={onSave}\n                    disabled={!editorData.items.filter(item => item.title.length > 0).length}\n                >\n                    Save Changes\n                </Button>\n                <Button variant='outlined' size='small' onClick={closeEditor}>\n                    Close\n                </Button>\n            </div>\n            <div className='editor-heading-wrap'>\n                <TextField\n                    label='Title'\n                    fullWidth\n                    autoComplete='off'\n                    onChange={onTitleChange}\n                    value={editorData.title}\n                    variant='standard'\n                />\n            </div>\n            <div className='editor-items-wrap'>\n                {editorData.items.map((item, index) => {\n                    return (\n                        <div key={index}>\n                            <div className='editor-item'>\n                                <div>\n                                    <TextField\n                                        label='Degree & Field of Study'\n                                        sx={{ mb: 1, mt: 1, mr: 1 }}\n                                        onChange={event => onEducationTitleChange(event, index)}\n                                        value={item.title}\n                                        data-key={index}\n                                        inputProps={{ style: { fontSize: 14 } }}\n                                        size='small'\n                                    />\n                                    <TextField\n                                        label='University or School'\n                                        sx={{ mb: 1, mt: 1, mr: 1 }}\n                                        onChange={event => onUniversityChange(event, index)}\n                                        value={item.university}\n                                        data-key={index}\n                                        inputProps={{ style: { fontSize: 14 } }}\n                                        size='small'\n                                    />\n                                    <TextField\n                                        label='Date (From - To)'\n                                        sx={{ mb: 1, mt: 1, mr: 1 }}\n                                        onChange={event => onDateChange(event, index)}\n                                        value={item.date}\n                                        data-key={index}\n                                        placeholder='YYYY - YYYY'\n                                        inputProps={{ style: { fontSize: 14 } }}\n                                        size='small'\n                                    />\n                                    <TextField\n                                        label='Percentage or CGPA'\n                                        sx={{ mb: 1, mt: 1, mr: 1 }}\n                                        onChange={event => onGpaChange(event, index)}\n                                        value={item.gpa}\n                                        data-key={index}\n                                        inputProps={{ style: { fontSize: 14 } }}\n                                        size='small'\n                                    />\n                                </div>\n                                <AddCircleIcon\n                                    onClick={event => onAddEducation(event, index)}\n                                    className='add-item-icon'\n                                ></AddCircleIcon>\n                                <DeleteForeverIcon\n                                    onClick={event => onDeleteEducation(event, index)}\n                                    className={`delete-item-icon ${index === 0 ? 'd-none' : ''}`}\n                                ></DeleteForeverIcon>\n                            </div>\n                            <Box sx={{ height: 20 }}></Box>\n                            <Divider></Divider>\n                            <Box sx={{ height: 20 }}></Box>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>,\n        document.getElementById('editorPortal')\n    );\n};\n\nexport default EducationEditor;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport SchoolIcon from '@mui/icons-material/School';\nimport EditIcon from '@mui/icons-material/Edit';\n\nimport EducationEditor from './EducationEditor';\n\nimport './Education.css';\n\nconst Education = props => {\n    const [open, setOpen] = useState(false);\n    console.log('calling education', open);\n\n    const [widgetData, setWidgetData] = useState(props.componentItem.componentData);\n\n    const dispatch = useDispatch();\n    const openEditorName = useSelector(state => state.resumeDataReducer.openEditorName);\n\n    const openEditor = () => {\n        dispatch(updateOpenEditorName(props.componentItem.name));\n        setOpen(true);\n    };\n\n    return (\n        <div className='resume-section resume-section-education'>\n            <div className='resume-section-title'>\n                <span>{widgetData.title}</span>\n                <span className='edit-component-icon'>\n                    <EditIcon titleAccess='Edit' onClick={openEditor} />\n                </span>\n            </div>\n            <div className='education-item-wrap'>\n                {widgetData.items.map((item, index) => {\n                    return (\n                        <div key={index} className='education-item'>\n                            <div className='resume-section-subtitle'>\n                                <span className='education-title full-width-field'>{item.title}</span>\n                                <span className='education-university full-width-field'>{item.university}</span>\n                            </div>\n                            <div className='section-meta'>\n                                {item.date && (\n                                    <div className='section-meta-item'>\n                                        <CalendarTodayIcon className='section-meta-icon resume-section-body'></CalendarTodayIcon>\n                                        <div className='resume-section-body' component='span' sx={{ pl: 0.8 }}>\n                                            {item.date}\n                                        </div>\n                                    </div>\n                                )}\n                                {item.gpa && (\n                                    <div className='section-meta-item'>\n                                        <SchoolIcon className='section-meta-icon resume-section-body'></SchoolIcon>\n                                        <div className='resume-section-body' component='span' sx={{ pl: 0.8 }}>\n                                            {item.gpa}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n\n            {openEditorName === props.componentItem.name ? (\n                <EducationEditor\n                    setWidgetData={setWidgetData}\n                    open={open}\n                    setOpen={setOpen}\n                    componentColumn={props.componentColumn}\n                    componentName={props.componentItem.name}\n                    editorData={widgetData}\n                />\n            ) : null}\n        </div>\n    );\n};\n\nexport default React.memo(Education);\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { TextField, Button, Divider, Box } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { updateResumeDataReducer, updateOpenEditorName } from '../../reducers/resumeDataSlice';\nimport { richEditorSettings } from '../../globals.js';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\n\nconst ExperienceEditor = props => {\n    const [editorData, setEditorData] = useState(props.editorData);\n    const dispatch = useDispatch();\n\n    const onWidgetDataChange = (key, newValue) => {\n        const newData = { ...editorData, [key]: newValue };\n        setEditorData(newData);\n        props.setWidgetData(newData);\n    };\n\n    const onSave = event => {\n        const newData = {\n            ...editorData,\n            items: editorData.items.filter((item, index) => item.experienceTitle.length > 0),\n        };\n        dispatch(\n            updateResumeDataReducer({\n                name: props.componentName,\n                column: props.componentColumn,\n                data: newData,\n            })\n        );\n        closeEditor();\n        console.log(editorData);\n    };\n\n    const onTitleChange = event => {\n        const newVal = event.target.value;\n        onWidgetDataChange('title', newVal);\n    };\n\n    const onFieldChange = (event, index, property) => {\n        const newValue = event.target.value;\n        let newExperienceItems = [...editorData.items];\n        newExperienceItems[index] = {\n            ...newExperienceItems[index],\n            [property]: newValue,\n        };\n        onWidgetDataChange('items', newExperienceItems);\n    };\n\n    const onSummaryChange = (val, index) => {\n        let newExperienceItems = [...editorData.items];\n        newExperienceItems[index] = {\n            ...newExperienceItems[index],\n            experienceSummary: val,\n        };\n        onWidgetDataChange('items', newExperienceItems);\n    };\n\n    const onAddExperience = (event, index) => {\n        let newExperienceItems = [...editorData.items];\n        newExperienceItems.splice(index + 1, 0, {\n            experienceTitle: '',\n            company: '',\n            date: '',\n            location: '',\n            experienceSummary: '',\n        });\n        onWidgetDataChange('items', newExperienceItems);\n    };\n\n    const onDeleteExperience = (event, index) => {\n        let newExperienceItems = [...editorData.items];\n        newExperienceItems.splice(index, 1);\n        onWidgetDataChange('items', newExperienceItems);\n    };\n\n    const closeEditor = () => {\n        dispatch(updateOpenEditorName(null));\n        props.setOpen(false);\n    };\n\n    return ReactDOM.createPortal(\n        <div className='editor-wrap'>\n            <div className='editor-section-header'>\n                <Button\n                    variant='contained'\n                    size='small'\n                    onClick={onSave}\n                    disabled={!editorData.items.filter(item => item.experienceTitle.length > 0).length}\n                >\n                    Save Changes\n                </Button>\n                <Button variant='outlined' size='small' onClick={closeEditor}>\n                    Close\n                </Button>\n            </div>\n            <div className='editor-heading-wrap'>\n                <TextField\n                    fullWidth\n                    label='Title'\n                    autoComplete='off'\n                    onChange={onTitleChange}\n                    value={editorData.title}\n                    variant='standard'\n                />\n            </div>\n\n            <div className='editor-items-wrap'>\n                {editorData.items.map((item, index) => {\n                    return (\n                        <div key={index}>\n                            <div className='editor-item'>\n                                <div>\n                                    <TextField\n                                        label='Job Role'\n                                        sx={{ mb: 1, mt: 1, mr: 1 }}\n                                        onChange={event => onFieldChange(event, index, 'experienceTitle')}\n                                        value={item.experienceTitle}\n                                        inputProps={{ style: { fontSize: 14 } }}\n                                        size='small'\n                                    />\n\n                                    <TextField\n                                        label='Company'\n                                        sx={{ mb: 1, mt: 1, mr: 1 }}\n                                        onChange={event => onFieldChange(event, index, 'company')}\n                                        value={item.company}\n                                        inputProps={{ style: { fontSize: 14 } }}\n                                        size='small'\n                                    />\n\n                                    <TextField\n                                        label='Date (From - To)'\n                                        sx={{ mb: 1, mt: 1, mr: 1 }}\n                                        onChange={event => onFieldChange(event, index, 'date')}\n                                        value={item.date}\n                                        inputProps={{ style: { fontSize: 14 } }}\n                                        size='small'\n                                    />\n\n                                    <TextField\n                                        label='location'\n                                        sx={{ mb: 1, mt: 1, mr: 1 }}\n                                        onChange={event => onFieldChange(event, index, 'location')}\n                                        value={item.location}\n                                        inputProps={{ style: { fontSize: 14 } }}\n                                        size='small'\n                                    />\n\n                                    <ReactQuill\n                                        defaultValue={item.experienceSummary}\n                                        modules={richEditorSettings}\n                                        theme={'snow'}\n                                        onChange={val => onSummaryChange(val, index)}\n                                    />\n                                </div>\n                                <AddCircleIcon\n                                    onClick={event => onAddExperience(event, index)}\n                                    className='add-item-icon'\n                                ></AddCircleIcon>\n                                <DeleteForeverIcon\n                                    onClick={event => onDeleteExperience(event, index)}\n                                    className={`delete-item-icon ${index === 0 ? 'd-none' : ''}`}\n                                ></DeleteForeverIcon>\n                            </div>\n                            <Box sx={{ height: 20 }}></Box>\n                            <Divider></Divider>\n                            <Box sx={{ height: 20 }}></Box>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>,\n        document.getElementById('editorPortal')\n    );\n};\n\nexport default ExperienceEditor;\n","import React, { useState } from 'react';\nimport { Box } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport BusinessIcon from '@mui/icons-material/Business';\nimport EditIcon from '@mui/icons-material/Edit';\n\nimport './Experience.css';\nimport ExperienceEditor from './ExperienceEditor';\n\nconst Experience = props => {\n    const [open, setOpen] = useState(false);\n\n    console.log('calling experience', open);\n    const [widgetData, setWidgetData] = useState(props.componentItem.componentData);\n\n    const dispatch = useDispatch();\n    const openEditorName = useSelector(state => state.resumeDataReducer.openEditorName);\n\n    const openEditor = () => {\n        dispatch(updateOpenEditorName(props.componentItem.name));\n        setOpen(true);\n    };\n\n    return (\n        <div className='resume-section resume-section-experience'>\n            <div className='resume-section-title'>\n                <span>{widgetData.title}</span>\n                <span className='edit-component-icon'>\n                    <EditIcon titleAccess='Edit' onClick={openEditor} />\n                </span>\n            </div>\n            <div className='experience-item-wrap'>\n                {widgetData.items.map((item, index) => {\n                    return (\n                        <div key={index} className='experience-item'>\n                            <span className='experience-title full-width-field resume-section-subtitle'>\n                                {item.experienceTitle}\n                            </span>\n                            <div className='section-meta'>\n                                {item.company && (\n                                    <div className='section-meta-item'>\n                                        <BusinessIcon fontSize='15'></BusinessIcon>\n                                        <Box component='span' sx={{ pl: 1 }}>\n                                            {item.company}\n                                        </Box>\n                                    </div>\n                                )}\n                                {item.date && (\n                                    <div className='section-meta-item'>\n                                        <CalendarTodayIcon fontSize='15'></CalendarTodayIcon>\n                                        <Box component='span' sx={{ pl: 1 }}>\n                                            {item.date}\n                                        </Box>\n                                    </div>\n                                )}\n                                {item.location && (\n                                    <div className='section-meta-item'>\n                                        <LocationOnIcon fontSize='15'></LocationOnIcon>\n                                        <Box component='span' sx={{ pl: 1 }}>\n                                            {item.location}\n                                        </Box>\n                                    </div>\n                                )}\n                            </div>\n                            <div\n                                className='experience-summary rich-text-div'\n                                dangerouslySetInnerHTML={{ __html: item.experienceSummary }}\n                            ></div>\n                        </div>\n                    );\n                })}\n            </div>\n            {openEditorName === props.componentItem.name ? (\n                <ExperienceEditor\n                    setWidgetData={setWidgetData}\n                    open={open}\n                    setOpen={setOpen}\n                    componentColumn={props.componentColumn}\n                    componentName={props.componentItem.name}\n                    editorData={widgetData}\n                />\n            ) : null}\n        </div>\n    );\n};\n\nexport default React.memo(Experience);\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { TextField, Button, Slider, Switch, Box } from '@mui/material';\nimport { GithubPicker } from 'react-color';\nimport { colors } from '../../globals.js';\nimport { useDispatch } from 'react-redux';\nimport { updateResumeDataReducer, updateOpenEditorName } from '../../reducers/resumeDataSlice';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\n\nconst LanguagesEditor = props => {\n    const [editorData, setEditorData] = useState(props.editorData);\n    const [toggleColor, setToggleColor] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const onWidgetDataChange = (key, newValue) => {\n        const newData = { ...editorData, [key]: newValue };\n        setEditorData(newData);\n        props.setWidgetData(newData);\n    };\n\n    const onTitleChange = event => {\n        const newVal = event.target.value;\n        onWidgetDataChange('title', newVal);\n    };\n\n    const onShowProficiencyChange = event => {\n        onWidgetDataChange('showProficiency', event.target.checked);\n    };\n\n    const onShowProficiencyProgressChange = event => {\n        onWidgetDataChange('showProficiencyProgress', event.target.checked);\n    };\n\n    const onLanguageChange = (event, index) => {\n        let languages = [...editorData.items];\n        languages[index] = { language: event.target.value, proficiency: 'Beginner' };\n        onWidgetDataChange('items', languages);\n    };\n\n    const onAddLanguage = (event, index) => {\n        let languages = [...editorData.items];\n        languages.splice(index + 1, 0, { language: '' });\n        onWidgetDataChange('items', languages);\n    };\n    const onDeleteLanguage = (event, index) => {\n        let languages = [...editorData.items];\n        languages.splice(index, 1);\n        onWidgetDataChange('items', languages);\n    };\n\n    const changeProficiencyProgressColor = color => {\n        console.log(color);\n        onWidgetDataChange('proficiencyProgressColor', color.hex);\n    };\n\n    const onProficiencyChange = (event, index) => {\n        let languages = [...editorData.items];\n        switch (event.target.value) {\n            case 25:\n                languages[index] = { language: languages[index].language, proficiency: 'Beginner' };\n                break;\n\n            case 50:\n                languages[index] = { language: languages[index].language, proficiency: 'Intermediate' };\n                break;\n\n            case 75:\n                languages[index] = { language: languages[index].language, proficiency: 'Proficient' };\n                break;\n\n            case 100:\n                languages[index] = { language: languages[index].language, proficiency: 'Native' };\n                break;\n            default:\n                languages[index] = { language: languages[index].language, proficiency: 'Beginner' };\n                break;\n        }\n        onWidgetDataChange('items', languages);\n    };\n\n    const onSave = event => {\n        const newData = { ...editorData };\n        dispatch(updateResumeDataReducer({ name: props.componentName, column: props.componentColumn, data: newData }));\n        closeEditor();\n    };\n\n    const closeEditor = () => {\n        dispatch(updateOpenEditorName(null));\n        props.setOpen(false);\n    };\n\n    const getProficiencyValue = prof => {\n        let val = 25;\n        switch (prof) {\n            case 'Beginner':\n                val = 25;\n                break;\n\n            case 'Intermediate':\n                val = 50;\n                break;\n\n            case 'Proficient':\n                val = 75;\n                break;\n\n            case 'Native':\n                val = 100;\n                break;\n            default:\n                val = 25;\n                break;\n        }\n        return val;\n    };\n\n    return ReactDOM.createPortal(\n        <div className='editor-wrap'>\n            <div className='editor-section-header'>\n                <Button\n                    variant='contained'\n                    size='small'\n                    onClick={onSave}\n                    disabled={!editorData.items.filter(item => item.language.length > 0).length}\n                >\n                    Save Changes\n                </Button>\n                <Button variant='outlined' size='small' onClick={closeEditor}>\n                    Close\n                </Button>\n            </div>\n            <div className='editor-heading-wrap'>\n                <TextField\n                    label='Title'\n                    fullWidth\n                    autoComplete='off'\n                    onChange={onTitleChange}\n                    value={editorData.title}\n                    variant='standard'\n                />\n            </div>\n\n            <div className='editor-options-wrap'>\n                <div>\n                    Show Proficiency:{' '}\n                    <Switch\n                        label='Proficiency'\n                        onChange={event => onShowProficiencyChange(event)}\n                        checked={editorData.showProficiency}\n                    />\n                </div>\n                <div>\n                    Show Proficiency Progress:{' '}\n                    <Switch\n                        label='Proficiency Progress'\n                        onChange={event => onShowProficiencyProgressChange(event)}\n                        checked={editorData.showProficiencyProgress}\n                    />\n                </div>\n                <Box sx={{ marginTop: '10px', marginBottom: '20px' }}>\n                    Proficiency Progress Color:{' '}\n                    <Box\n                        className='resume-setting-selected-color'\n                        onClick={() => {\n                            setToggleColor(!toggleColor);\n                        }}\n                        sx={{ backgroundColor: editorData.proficiencyProgressColor }}\n                    ></Box>\n                    <div className={`resume-setting-item-body ${toggleColor === true ? '' : 'd-none'}`}>\n                        <GithubPicker\n                            color={editorData.proficiencyProgressColor}\n                            onChangeComplete={changeProficiencyProgressColor}\n                            colors={colors}\n                            triangle='hide'\n                        />\n                    </div>\n                </Box>\n            </div>\n\n            <div className='editor-items-wrap'>\n                {editorData.items.map((item, index) => {\n                    return (\n                        <div className='editor-item' key={index}>\n                            <TextField\n                                label={'Option ' + (index + 1)}\n                                sx={{ mb: 1, mt: 1, mr: 1 }}\n                                onChange={event => onLanguageChange(event, index)}\n                                value={item.language}\n                                data-key={index}\n                                size='small'\n                            />\n                            <div className='progress-wrap'>\n                                {item.proficiency}\n                                <Slider\n                                    aria-label='Proficiency'\n                                    value={getProficiencyValue(item.proficiency)}\n                                    step={25}\n                                    marks\n                                    min={25}\n                                    max={100}\n                                    onChange={event => onProficiencyChange(event, index)}\n                                />\n                            </div>\n                            <AddCircleIcon\n                                onClick={event => onAddLanguage(event, index)}\n                                className='add-item-icon'\n                            ></AddCircleIcon>\n                            <DeleteForeverIcon\n                                onClick={event => onDeleteLanguage(event, index)}\n                                className={`delete-item-icon ${index === 0 ? 'd-none' : ''}`}\n                            ></DeleteForeverIcon>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>,\n        document.getElementById('editorPortal')\n    );\n};\n\nexport default LanguagesEditor;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nimport { LinearProgress, Box } from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport LanguagesEditor from './LanguagesEditor';\n\nimport './Languages.css';\n\nconst Languages = props => {\n    const [open, setOpen] = useState(false);\n    console.log('calling languages', open);\n\n    const [widgetData, setWidgetData] = useState(props.componentItem.componentData);\n    const dispatch = useDispatch();\n\n    const openEditorName = useSelector(state => state.resumeDataReducer.openEditorName);\n\n    const openEditor = () => {\n        dispatch(updateOpenEditorName(props.componentItem.name));\n        setOpen(true);\n    };\n\n    const getProgressFromProficiency = proficiency => {\n        let val = 25;\n        switch (proficiency) {\n            case 'Beginner':\n                val = 25;\n                break;\n\n            case 'Intermediate':\n                val = 50;\n                break;\n\n            case 'Proficient':\n                val = 75;\n                break;\n\n            case 'Native':\n                val = 100;\n                break;\n            default:\n                val = 25;\n                break;\n        }\n        return val;\n    };\n    return (\n        <div className='resume-section resume-section-language'>\n            <div className='resume-section-title'>\n                <span>{widgetData.title}</span>\n                <span className='edit-component-icon'>\n                    <EditIcon onClick={openEditor} />\n                </span>\n            </div>\n            {widgetData.items.map((item, index) => {\n                return (\n                    <div key={index} className='language-wrapper'>\n                        <div className='language-header'>\n                            <div className='language-title'>{item.language}</div>\n                            <div className={`language-level ${widgetData.showProficiency ? '' : 'd-none'}`}>\n                                {' '}\n                                - {item.proficiency}\n                            </div>\n                        </div>\n                        <div className='language-progress'>\n                            <Box sx={{ color: widgetData.proficiencyProgressColor }}>\n                                <LinearProgress\n                                    color='inherit'\n                                    className={widgetData.showProficiencyProgress ? '' : 'd-none'}\n                                    variant='determinate'\n                                    value={getProgressFromProficiency(item.proficiency)}\n                                />\n                            </Box>\n                        </div>\n                    </div>\n                );\n            })}\n\n            {openEditorName === props.componentItem.name ? (\n                <LanguagesEditor\n                    setWidgetData={setWidgetData}\n                    open={open}\n                    setOpen={setOpen}\n                    componentColumn={props.componentColumn}\n                    componentName={props.componentItem.name}\n                    editorData={widgetData}\n                />\n            ) : null}\n        </div>\n    );\n};\n\nexport default React.memo(Languages);\n","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { TextField, Button, Divider, Box, Switch } from '@mui/material';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateResumeDataReducer, updateOpenEditorName } from '../../reducers/resumeDataSlice';\r\n\r\nimport { richEditorSettings } from '../../globals.js';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\nconst SocialEditor = props => {\r\n    const [editorData, setEditorData] = useState(props.editorData);\r\n    const dispatch = useDispatch();\r\n\r\n    const onWidgetDataChange = (key, newValue) => {\r\n        const newData = { ...editorData, [key]: newValue };\r\n        setEditorData(newData);\r\n        props.setWidgetData(newData);\r\n    };\r\n\r\n    const onSave = event => {\r\n        const newData = { ...editorData };\r\n        dispatch(\r\n            updateResumeDataReducer({\r\n                name: props.componentName,\r\n                column: props.componentColumn,\r\n                data: newData,\r\n            })\r\n        );\r\n        closeEditor();\r\n        console.log(editorData);\r\n    };\r\n\r\n    const onTitleChange = event => {\r\n        const newVal = event.target.value;\r\n        onWidgetDataChange('title', newVal);\r\n    };\r\n\r\n    const onHideTitle = event => {\r\n        onWidgetDataChange('hideTitle', event.target.checked);\r\n    }\r\n\r\n    const onFieldChange = (val, index, property) => {\r\n        const newValue = val;\r\n        let newprofessionalSummaryItems = [...editorData.items];\r\n        newprofessionalSummaryItems[index] = {\r\n            ...newprofessionalSummaryItems[index],\r\n            [property]: newValue,\r\n        };\r\n        onWidgetDataChange('items', newprofessionalSummaryItems);\r\n    };\r\n\r\n    const closeEditor = () => {\r\n        dispatch(updateOpenEditorName(null));\r\n        props.setOpen(false);\r\n    };\r\n\r\n    return ReactDOM.createPortal(\r\n        <div className='editor-wrap'>\r\n            <div className='editor-section-header'>\r\n                <Button\r\n                    variant='contained'\r\n                    size='small'\r\n                    onClick={onSave}\r\n                    disabled={!editorData.items.filter(item => item.summary.length > 0).length}\r\n                >\r\n                    Save Changes\r\n                </Button>\r\n                <Button variant='outlined' size='small' onClick={closeEditor}>\r\n                    Close\r\n                </Button>\r\n            </div>\r\n            <div className='editor-heading-wrap'>\r\n                <TextField\r\n                    fullWidth\r\n                    label='Title'\r\n                    autoComplete='off'\r\n                    onChange={onTitleChange}\r\n                    value={editorData.title}\r\n                    variant='standard'\r\n                />\r\n            </div>\r\n\r\n            <div className='editor-items-wrap'>\r\n                <div>\r\n                    Hide Title:{' '}\r\n                    <Switch\r\n                        label='Hide Title'\r\n                        onChange={event => onHideTitle(event)}\r\n                        checked={editorData.hideTitle}\r\n                    />\r\n                </div>\r\n                {editorData.items.map((item, index) => {\r\n                    return (\r\n                        <div key={index}>\r\n                            <div className='editor-item'>\r\n                                <div>\r\n                                    <ReactQuill\r\n                                        defaultValue={item.summary}\r\n                                        modules={richEditorSettings}\r\n                                        theme={'snow'}\r\n                                        onChange={val => onFieldChange(val, index, 'summary')}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <Box sx={{ height: 20 }}></Box>\r\n                            <Divider></Divider>\r\n                            <Box sx={{ height: 20 }}></Box>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>,\r\n        document.getElementById('editorPortal')\r\n    );\r\n};\r\n\r\nexport default SocialEditor;\r\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateOpenEditorName } from '../../reducers/resumeDataSlice';\nimport EditIcon from '@mui/icons-material/Edit';\n\nimport ProfessionalSummaryEditor from './ProfessionalSummaryEditor';\n\nimport './ProfessionalSummary.css';\n\nconst ProfessionalSummary = props => {\n    const [open, setOpen] = useState(false);\n    console.log('calling ProfessionalSummary', open);\n\n    const [widgetData, setWidgetData] = useState(props.componentItem.componentData);\n\n    const dispatch = useDispatch();\n    const openEditorName = useSelector(state => state.resumeDataReducer.openEditorName);\n\n    const openEditor = () => {\n        dispatch(updateOpenEditorName(props.componentItem.name));\n        setOpen(true);\n    };\n\n    return (\n        <div className='resume-section resume-section-professional-summary'>\n            {widgetData.hideTitle && props.componentColumn !== 'componentLibrary' ? (\n                <span className='edit-component-icon'>\n                    <EditIcon onClick={openEditor} />\n                </span>\n            ) : (\n                <div className='resume-section-title'>\n                    <span>{widgetData.title}</span>\n                    <span className='edit-component-icon'>\n                        <EditIcon onClick={openEditor} />\n                    </span>\n                </div>\n            )}\n\n            <div className='professional-summary-item-wrap'>\n                {widgetData.items.map((item, index) => {\n                    return (\n                        <div className='professional-summary-item' key={index}>\n                            <span\n                                className='professional-summary-summary-body rich-text-div'\n                                dangerouslySetInnerHTML={{ __html: item.summary }}\n                            ></span>\n                        </div>\n                    );\n                })}\n            </div>\n\n            {openEditorName === props.componentItem.name ? (\n                <ProfessionalSummaryEditor\n                    setWidgetData={setWidgetData}\n                    open={open}\n                    setOpen={setOpen}\n                    componentColumn={props.componentColumn}\n                    componentName={props.componentItem.name}\n                    editorData={widgetData}\n                />\n            ) : null}\n        </div>\n    );\n};\n\nexport default React.memo(ProfessionalSummary);\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { TextField, Button, Switch } from '@mui/material';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport { useDispatch } from 'react-redux';\nimport { updateResumeDataReducer, updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nconst SkillsEditor = props => {\n    const [editorData, setEditorData] = useState(props.editorData);\n    const dispatch = useDispatch();\n\n    const onWidgetDataChange = (key, newValue) => {\n        const newData = { ...editorData, [key]: newValue };\n        setEditorData(newData);\n        props.setWidgetData(newData);\n    };\n\n    const onTitleChange = event => {\n        const newVal = event.target.value;\n        onWidgetDataChange('title', newVal);\n    };\n\n    const onRoundedChange = event => {\n        onWidgetDataChange('rounded', event.target.checked);\n    };\n\n    const onFilledChange = event => {\n        onWidgetDataChange('filled', event.target.checked);\n    };\n\n    const onSkillChange = (event, index) => {\n        let skills = [...editorData.items];\n        skills[index] = { title: event.target.value };\n        onWidgetDataChange('items', skills);\n    };\n\n    const onAddSkill = (event, index) => {\n        let skills = [...editorData.items];\n        skills.splice(index + 1, 0, { title: '' });\n        onWidgetDataChange('items', skills);\n    };\n    const onDeleteSkill = (event, index) => {\n        let skills = [...editorData.items];\n        skills.splice(index, 1);\n        onWidgetDataChange('items', skills);\n    };\n\n    const onSave = event => {\n        const newData = { ...editorData };\n        setEditorData(newData);\n        dispatch(updateResumeDataReducer({ name: props.componentName, column: props.componentColumn, data: newData }));\n        closeEditor();\n        console.log(editorData);\n    };\n\n    const closeEditor = () => {\n        dispatch(updateOpenEditorName(null));\n        props.setOpen(false);\n    };\n\n    return ReactDOM.createPortal(\n        <div className='editor-wrap'>\n            <div className='editor-section-header'>\n                <Button\n                    variant='contained'\n                    size='small'\n                    onClick={onSave}\n                    disabled={!editorData.items.filter(item => item.title.length > 0).length}\n                >\n                    Save Changes\n                </Button>\n                <Button variant='outlined' size='small' onClick={closeEditor}>\n                    Close\n                </Button>\n            </div>\n\n            <div className='editor-heading-wrap'>\n                <TextField\n                    label='Title'\n                    fullWidth\n                    autoComplete='off'\n                    onChange={onTitleChange}\n                    value={editorData.title}\n                    variant='standard'\n                />\n            </div>\n            <div className='editor-options-wrap'>\n                <div>\n                    Rounded: <Switch label='Rounded' onChange={onRoundedChange} checked={editorData.rounded} />\n                </div>\n                <div>\n                    Filled: <Switch label='Filled' onChange={onFilledChange} checked={editorData.filled} />\n                </div>\n            </div>\n            <div className='editor-items-wrap'>\n                {editorData.items.map((item, index) => {\n                    return (\n                        <div className='editor-item' key={index}>\n                            <TextField\n                                label={'Option ' + (index + 1)}\n                                sx={{ mb: 1, mt: 1, mr: 1 }}\n                                onChange={event => onSkillChange(event, index)}\n                                value={item.title}\n                                data-key={index}\n                                size='small'\n                            />\n                            <AddCircleIcon\n                                onClick={event => onAddSkill(event, index)}\n                                className='add-item-icon'\n                            ></AddCircleIcon>\n                            <DeleteForeverIcon\n                                onClick={event => onDeleteSkill(event, index)}\n                                className={`delete-item-icon ${index === 0 ? 'd-none' : ''}`}\n                            ></DeleteForeverIcon>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>,\n        document.getElementById('editorPortal')\n    );\n};\n\nexport default SkillsEditor;\n","import React, { useState } from 'react';\nimport { Chip } from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport SkillsEditor from './SkillsEditor';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nimport './Skills.css';\nconst Skills = props => {\n    const [open, setOpen] = useState(false);\n    const [widgetData, setWidgetData] = useState(props.componentItem.componentData);\n    const dispatch = useDispatch();\n    console.log('calling skills', open);\n\n    const openEditorName = useSelector(state => state.resumeDataReducer.openEditorName);\n    const openEditor = () => {\n        dispatch(updateOpenEditorName(props.componentItem.name));\n        setOpen(true);\n    };\n\n    return (\n        <div className='resume-section resume-section-skills'>\n            <div className='resume-section-title'>\n                <span>{widgetData.title}</span>\n                <span className='edit-component-icon'>\n                    <EditIcon titleAccess='Edit' onClick={openEditor} />\n                </span>\n            </div>\n\n            <div className='skills-item-wrap'>\n                {widgetData.items.map((item, index) => {\n                    return (\n                        <Chip\n                            key={index}\n                            label={item.title}\n                            className={`resume-section-body skills-chip ${widgetData.rounded ? '' : 'no-rounded'}`}\n                            variant={widgetData.filled ? 'filled' : 'outlined'}\n                        />\n                    );\n                })}\n            </div>\n\n            {openEditorName === props.componentItem.name ? (\n                <SkillsEditor\n                    setWidgetData={setWidgetData}\n                    open={open}\n                    setOpen={setOpen}\n                    componentColumn={props.componentColumn}\n                    componentName={props.componentItem.name}\n                    editorData={widgetData}\n                />\n            ) : null}\n        </div>\n    );\n};\n\nexport default React.memo(Skills);\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { TextField, Button, Slider, Switch } from '@mui/material';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport { useDispatch } from 'react-redux';\nimport { updateResumeDataReducer, updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nconst SkillsWithProgressEditor = props => {\n    const [editorData, setEditorData] = useState(props.editorData);\n    const dispatch = useDispatch();\n\n    const onWidgetDataChange = (key, newValue) => {\n        const newData = { ...editorData, [key]: newValue };\n        setEditorData(newData);\n        props.setWidgetData(newData);\n    };\n\n    const onTitleChange = event => {\n        const newVal = event.target.value;\n        onWidgetDataChange('title', newVal);\n    };\n\n    const onShowProficiencyChange = event => {\n        onWidgetDataChange('showProficiency', event.target.checked);\n    };\n\n    const onShowProficiencyProgressChange = event => {\n        onWidgetDataChange('showProficiencyProgress', event.target.checked);\n    };\n\n    const onskillsProgressItemsChange = (event, index) => {\n        let newSkillsProgressItems = [...editorData.items];\n        newSkillsProgressItems[index] = { title: event.target.value, proficiency: 0 };\n        onWidgetDataChange('items', newSkillsProgressItems);\n    };\n\n    const onAddSkills = (event, index) => {\n        let newSkillsProgressItems = [...editorData.items];\n        newSkillsProgressItems.splice(index + 1, 0, { title: '', proficiency: 0 });\n        onWidgetDataChange('items', newSkillsProgressItems);\n    };\n    const onDeleteSkills = (event, index) => {\n        let newSkillsProgressItems = [...editorData.items];\n        newSkillsProgressItems.splice(index, 1);\n        onWidgetDataChange('items', newSkillsProgressItems);\n    };\n\n    const onProficiencyChange = (event, index) => {\n        let newSkillsProgressItems = [...editorData.items];\n        newSkillsProgressItems[index] = { title: newSkillsProgressItems[index].title, proficiency: event.target.value };\n        onWidgetDataChange('items', newSkillsProgressItems);\n    };\n\n    const onSave = event => {\n        const newData = { ...editorData, items: editorData.items.filter((item, index) => item.title.length > 0) };\n        dispatch(updateResumeDataReducer({ name: props.componentName, column: props.componentColumn, data: newData }));\n        closeEditor();\n    };\n\n    const closeEditor = () => {\n        dispatch(updateOpenEditorName(null));\n        props.setOpen(false);\n    };\n\n    return ReactDOM.createPortal(\n        <div className='editor-wrap'>\n            <div className='editor-heading-wrap'>\n                <div className='editor-section-header'>\n                    <Button\n                        variant='contained'\n                        size='small'\n                        onClick={onSave}\n                        disabled={!editorData.items.filter(item => item.title.length > 0).length}\n                    >\n                        Save Changes\n                    </Button>\n                    <Button variant='outlined' size='small' onClick={closeEditor}>\n                        Close\n                    </Button>\n                </div>\n                <TextField\n                    fullWidth\n                    label='Title'\n                    autoComplete='off'\n                    onChange={onTitleChange}\n                    value={editorData.title}\n                    variant='standard'\n                />\n            </div>\n\n            <div className='editor-options-wrap'>\n                <div>\n                    Show Proficiency:{' '}\n                    <Switch\n                        label='Proficiency'\n                        onChange={event => onShowProficiencyChange(event)}\n                        checked={editorData.showProficiency}\n                    />\n                </div>\n                <div>\n                    Show Proficiency Progress:{' '}\n                    <Switch\n                        label='Proficiency Progress'\n                        onChange={event => onShowProficiencyProgressChange(event)}\n                        checked={editorData.showProficiencyProgress}\n                    />\n                </div>\n            </div>\n\n            <div className='editor-items-wrap'>\n                {editorData.items.map((item, index) => {\n                    return (\n                        <div className='editor-item' key={index}>\n                            <TextField\n                                label={'Option ' + (index + 1)}\n                                sx={{ mb: 1, mt: 1, mr: 1 }}\n                                onChange={event => onskillsProgressItemsChange(event, index)}\n                                value={item.title}\n                                data-key={index}\n                                size='small'\n                            />\n                            <div className='progress-wrap'>\n                                {item.proficiency}\n                                <Slider\n                                    aria-label='Proficiency'\n                                    value={Number(item.proficiency)}\n                                    step={10}\n                                    marks\n                                    min={0}\n                                    max={100}\n                                    onChange={event => onProficiencyChange(event, index)}\n                                />\n                            </div>\n                            <AddCircleIcon\n                                onClick={event => onAddSkills(event, index)}\n                                className='add-item-icon'\n                            ></AddCircleIcon>\n                            <DeleteForeverIcon\n                                onClick={event => onDeleteSkills(event, index)}\n                                className={`delete-item-icon ${index === 0 ? 'd-none' : ''}`}\n                            ></DeleteForeverIcon>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>,\n        document.getElementById('editorPortal')\n    );\n};\n\nexport default SkillsWithProgressEditor;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nimport LinearProgress from '@mui/material/LinearProgress';\nimport EditIcon from '@mui/icons-material/Edit';\nimport SkillsWithProgressEditor from './SkillsWithProgressEditor';\n\nimport './SkillsWithProgress.css';\n\nconst SkillsWithProgress = props => {\n    const [open, setOpen] = useState(false);\n    console.log('calling SkillsWith Progress Bar', open);\n\n    const [widgetData, setWidgetData] = useState(props.componentItem.componentData);\n\n    const dispatch = useDispatch();\n    const openEditorName = useSelector(state => state.resumeDataReducer.openEditorName);\n\n    const openEditor = () => {\n        dispatch(updateOpenEditorName(props.componentItem.name));\n        setOpen(true);\n    };\n\n    return (\n        <div className='resume-section resume-section-skill-with-progress'>\n            <div className='resume-section-title'>\n                <span>{widgetData.title}</span>\n                <span className='edit-component-icon'>\n                    <EditIcon titleAccess='Edit' onClick={openEditor} />\n                </span>\n            </div>\n            {widgetData.items.map((item, index) => {\n                return (\n                    <div\n                        key={index}\n                        className={\n                            widgetData.showProficiencyProgress\n                                ? 'skill-wrapper'\n                                : 'skill-wrapper min-margin'\n                        }\n                    >\n                        <div className='skill-header'>\n                            <div className='skill-title'>{item.title}</div>\n                            <div\n                                className={`skill-percentage ${\n                                    widgetData.showProficiency ? '' : 'd-none'\n                                }`}\n                            >\n                                {' '}\n                                - {item.proficiency}\n                            </div>\n                        </div>\n                        <div className='skill-progress'>\n                            <LinearProgress\n                                className={widgetData.showProficiencyProgress ? '' : 'd-none'}\n                                variant='determinate'\n                                value={Number(item.proficiency)}\n                            />\n                        </div>\n                    </div>\n                );\n            })}\n\n            {openEditorName === props.componentItem.name ? (\n                <SkillsWithProgressEditor\n                    setWidgetData={setWidgetData}\n                    open={open}\n                    setOpen={setOpen}\n                    componentColumn={props.componentColumn}\n                    componentName={props.componentItem.name}\n                    editorData={widgetData}\n                />\n            ) : null}\n        </div>\n    );\n};\n\nexport default React.memo(SkillsWithProgress);\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { TextField, Button, Divider, Box } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { updateResumeDataReducer, updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\n\nconst SocialEditor = props => {\n    const [editorData, setEditorData] = useState(props.editorData);\n    const dispatch = useDispatch();\n\n    const onWidgetDataChange = (key, newValue) => {\n        const newData = { ...editorData, [key]: newValue };\n        setEditorData(newData);\n        props.setWidgetData(newData);\n    };\n\n    const onSave = event => {\n        const newData = { ...editorData };\n        dispatch(\n            updateResumeDataReducer({\n                name: props.componentName,\n                column: props.componentColumn,\n                data: newData,\n            })\n        );\n        closeEditor();\n        console.log(editorData);\n    };\n\n    const onTitleChange = event => {\n        const newVal = event.target.value;\n        onWidgetDataChange('title', newVal);\n    };\n\n    const onFieldChange = (event, index, property) => {\n        const newValue = event.target.value;\n        let newSocialItems = [...editorData.items];\n        newSocialItems[index] = {\n            ...newSocialItems[index],\n            [property]: newValue,\n        };\n        onWidgetDataChange('items', newSocialItems);\n    };\n\n    const onAddSocial = (event, index) => {\n        let newSocialItems = [...editorData.items];\n        newSocialItems.splice(index + 1, 0, {\n            socialPlatform: '',\n            username: '',\n        });\n        onWidgetDataChange('items', newSocialItems);\n    };\n\n    const onDeleteExperience = (event, index) => {\n        let newSocialItems = [...editorData.items];\n        newSocialItems.splice(index, 1);\n        onWidgetDataChange('items', newSocialItems);\n    };\n\n    const closeEditor = () => {\n        dispatch(updateOpenEditorName(null));\n        props.setOpen(false);\n    };\n\n    return ReactDOM.createPortal(\n        <div className='editor-wrap'>\n            <div className='editor-section-header'>\n                <Button\n                    variant='contained'\n                    size='small'\n                    onClick={onSave}\n                    disabled={!editorData.items.filter(item => item.socialPlatform.length > 0).length}\n                >\n                    Save Changes\n                </Button>\n                <Button variant='outlined' size='small' onClick={closeEditor}>\n                    Close\n                </Button>\n            </div>\n            <div className='editor-heading-wrap'>\n                <TextField\n                    fullWidth\n                    autoComplete='off'\n                    onChange={onTitleChange}\n                    value={editorData.title}\n                    variant='standard'\n                />\n            </div>\n\n            <div className='editor-items-wrap'>\n                {editorData.items.map((item, index) => {\n                    return (\n                        <div key={index}>\n                            <div className='editor-item'>\n                                <div>\n                                    <TextField\n                                        label='Social Platform'\n                                        sx={{ mb: 1, mt: 1, mr: 1 }}\n                                        onChange={event => onFieldChange(event, index, 'socialPlatform')}\n                                        value={item.socialPlatform}\n                                        inputProps={{ style: { fontSize: 14 } }}\n                                        size='small'\n                                    />\n\n                                    <TextField\n                                        label='Username or URL'\n                                        sx={{ mb: 1, mt: 1, mr: 1 }}\n                                        onChange={event => onFieldChange(event, index, 'username')}\n                                        value={item.username}\n                                        inputProps={{ style: { fontSize: 14 } }}\n                                        size='small'\n                                    />\n                                </div>\n                                <AddCircleIcon\n                                    onClick={event => onAddSocial(event, index)}\n                                    className='add-item-icon'\n                                ></AddCircleIcon>\n                                <DeleteForeverIcon\n                                    onClick={event => onDeleteExperience(event, index)}\n                                    className={`delete-item-icon ${index === 0 ? 'd-none' : ''}`}\n                                ></DeleteForeverIcon>\n                            </div>\n                            <Box sx={{ height: 20 }}></Box>\n                            <Divider></Divider>\n                            <Box sx={{ height: 20 }}></Box>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>,\n        document.getElementById('editorPortal')\n    );\n};\n\nexport default SocialEditor;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateOpenEditorName } from '../../reducers/resumeDataSlice';\nimport EditIcon from '@mui/icons-material/Edit';\nimport SocialEditor from './SocialEditor';\n\nimport './Social.css';\nconst Social = props => {\n    const [open, setOpen] = useState(false);\n    console.log('calling Social', open);\n\n    const [widgetData, setWidgetData] = useState(props.componentItem.componentData);\n\n    const dispatch = useDispatch();\n    const openEditorName = useSelector(state => state.resumeDataReducer.openEditorName);\n\n    const openEditor = () => {\n        dispatch(updateOpenEditorName(props.componentItem.name));\n        setOpen(true);\n    };\n\n    return (\n        <div className='resume-section resume-section-Social'>\n            <div className='resume-section-title'>\n                <span>{widgetData.title}</span>\n                <span className='edit-component-icon'>\n                    <EditIcon onClick={openEditor} />\n                </span>\n            </div>\n\n            <div className='social-item-wrap'>\n                {widgetData.items.map((item, index) => {\n                    return (\n                        <div className='social-item' key={index}>\n                            <div className='social-platform resume-section-subtitle'>{item.socialPlatform}</div>\n                            <div className='social-username'>{item.username}</div>\n                        </div>\n                    );\n                })}\n            </div>\n\n            {openEditorName === props.componentItem.name ? (\n                <SocialEditor\n                    setWidgetData={setWidgetData}\n                    open={open}\n                    setOpen={setOpen}\n                    componentColumn={props.componentColumn}\n                    componentName={props.componentItem.name}\n                    editorData={widgetData}\n                />\n            ) : null}\n        </div>\n    );\n};\n\nexport default React.memo(Social);\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useDispatch } from 'react-redux';\nimport { TextField, Button, MenuItem, Grid } from '@mui/material';\n\nimport { updateResumeDataReducer, updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nconst DividerEditor = props => {\n    const [editorData, setEditorData] = useState(props.editorData);\n    const dispatch = useDispatch();\n\n    const onSave = event => {\n        dispatch(\n            updateResumeDataReducer({ name: props.componentName, column: props.componentColumn, data: editorData })\n        );\n        closeEditor();\n    };\n\n    const closeEditor = () => {\n        dispatch(updateOpenEditorName(null));\n        props.setOpen(false);\n    };\n\n    const onStyleChange = (style, value) => {\n        if (style.type === 'number') {\n            if (!value) {\n                value = 0;\n            }\n            if (value >= 0 && value <= 100) {\n                updateStyle(style, value);\n            }\n        } else {\n            updateStyle(style, value);\n        }\n    };\n\n    function updateStyle(s, value) {\n        const widgetData = JSON.parse(JSON.stringify(editorData));\n        const style = widgetData.styles.find(style => style.rule === s.rule);\n        style.value = value;\n        setEditorData(widgetData);\n        props.setWidgetData(widgetData);\n    }\n\n    return ReactDOM.createPortal(\n        <div className='editor-wrap'>\n            <div className='editor-section-header'>\n                <Button variant='contained' size='small' onClick={onSave}>\n                    Save Changes\n                </Button>\n                <Button variant='outlined' size='small' onClick={closeEditor}>\n                    Close\n                </Button>\n            </div>\n            <div className='editor-heading-wrap'>\n                <TextField\n                    fullWidth\n                    readOnly\n                    autoComplete='off'\n                    variant='standard'\n                    value={editorData.title}\n                />\n            </div>\n            <div className='editor-options-wrap'>\n                <Grid container spacing={1}>\n                    {editorData.styles.map(style => {\n                        return (\n                            <Grid item xs={12} md={6} key={style.rule}>\n                                <TextField\n                                    type={style.type}\n                                    select={style.type === 'select'}\n                                    label={style.label + (style.unit ? ` (${style.unit})` : '')}\n                                    value={style.value}\n                                    margin='normal'\n                                    size='small'\n                                    fullWidth\n                                    InputProps={{ inputProps: { min: 0, max: 100 } }}\n                                    onChange={event => onStyleChange(style, event.target.value)}\n                                >\n                                    {style.type === 'select' &&\n                                        style.options.map(option => (\n                                            <MenuItem key={option} value={option}>\n                                                {option}\n                                            </MenuItem>\n                                        ))}\n                                </TextField>\n                            </Grid>\n                        );\n                    })}\n                </Grid>\n            </div>\n        </div>,\n        document.getElementById('editorPortal')\n    );\n};\n\nexport default DividerEditor;\n","import React, { useState } from 'react';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DividerEditor from './DividerEditor';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateOpenEditorName } from '../../reducers/resumeDataSlice';\n\nimport './Divider.css';\n\nconst Divider = props => {\n    const [open, setOpen] = useState(false);\n    const [widgetData, setWidgetData] = useState(props.componentItem.componentData);\n\n    const dispatch = useDispatch();\n    const openEditorName = useSelector(state => state.resumeDataReducer.openEditorName);\n    const openEditor = () => {\n        dispatch(updateOpenEditorName(props.componentItem.name));\n        setOpen(true);\n    };\n\n    const styles = {};\n    widgetData.styles.forEach(style => {\n        styles[style.rule] = style.value + style.unit;\n    });\n\n    return (\n        <div className='resume-section'>\n            {props.componentColumn !== 'componentLibrary' ? (\n                <span className='edit-component-icon'>\n                    <EditIcon onClick={openEditor} />\n                </span>\n            ) : (\n                <div className='resume-section-title'>\n                    <span>{widgetData.title}</span>\n                    <span className='edit-component-icon'>\n                        <EditIcon onClick={openEditor} />\n                    </span>\n                </div>\n            )}\n\n            <div className='divider-wrapper'>\n                <hr style={styles} />\n            </div>\n\n            {openEditorName === props.componentItem.name ? (\n                <DividerEditor\n                    open={open}\n                    setWidgetData={setWidgetData}\n                    setOpen={setOpen}\n                    componentColumn={props.componentColumn}\n                    componentName={props.componentItem.name}\n                    editorData={widgetData}\n                />\n            ) : null}\n        </div>\n    );\n};\n\nexport default React.memo(Divider);\n","import React, { useState, useEffect, Suspense } from 'react';\nimport {\n    Button,\n    Box,\n    Paper,\n    Grid,\n    Autocomplete,\n    TextField,\n    CircularProgress,\n    Alert,\n    Snackbar,\n    LinearProgress,\n} from '@mui/material';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    getResumeDataByResumeId,\n    updateResumeDataByResumeId,\n    updateOpenEditorName,\n} from '../../reducers/resumeDataSlice';\nimport {\n    getResumeSettingsByResumeId,\n    updateResumeSettingsByResumeId,\n    updateSettingsDataReducer,\n} from '../../reducers/resumeSettingsSlice';\nimport { getUserDataByUserId, updateUserResumeDataByUserId } from '../../reducers/userDataSlice';\n\nimport WebAssetOutlinedIcon from '@mui/icons-material/WebAssetOutlined';\nimport WebOutlinedIcon from '@mui/icons-material/WebOutlined';\nimport ContentCopyOutlinedIcon from '@mui/icons-material/ContentCopyOutlined';\nimport SettingsOutlinedIcon from '@mui/icons-material/SettingsOutlined';\nimport AddCircleOutlineOutlinedIcon from '@mui/icons-material/AddCircleOutlineOutlined';\nimport RemoveCircleOutlineOutlinedIcon from '@mui/icons-material/RemoveCircleOutlineOutlined';\nimport RemoveOutlinedIcon from '@mui/icons-material/RemoveOutlined';\nimport AddOutlinedIcon from '@mui/icons-material/AddOutlined';\nimport SaveOutlinedIcon from '@mui/icons-material/SaveOutlined';\nimport OpenWithIcon from '@mui/icons-material/OpenWith';\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\nimport FileDownloadOutlinedIcon from '@mui/icons-material/FileDownloadOutlined';\nimport { useParams } from 'react-router-dom';\nimport html2canvas from 'html2canvas';\n\nimport './Builder.css';\nimport GlobalResumeSetting from '../../components/GlobalResumeSetting/GlobalResumeSetting';\nimport 'react-quill/dist/quill.snow.css';\n\nimport Achievement from '../../components/Achievements/Achievement';\nimport BasicInfo from '../../components/BasicInfo/BasicInfo';\nimport Education from '../../components/Education/Education';\nimport Experience from '../../components/Experience/Experience';\nimport Languages from '../../components/Languages/Languages';\nimport ProfessionalSummary from '../../components/ProfessionalSummary/ProfessionalSummary';\nimport Skills from '../../components/Skills/Skills';\nimport SkillsWithProgress from '../../components/SkillsWithProgress/SkillsWithProgress';\nimport Social from '../../components/Social/Social';\nimport Divider from '../../components/Divider/Divider';\n\nfunction Builder() {\n    let resumeHTML;\n    const { authReducer, resumeDataReducer, resumeSettingsReducer, userDataReducer } = useSelector(state => state);\n    const openEditorName = useSelector(state => state.resumeDataReducer.openEditorName);\n    const [arr, setItems] = useState(null);\n    const [pageTwo, setPageTwo] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [openSnackbar, setopenSnackbar] = useState(false);\n    const [resumeSettings, setResumeSettings] = useState(null);\n\n    let { resumeId } = useParams();\n    const dispatch = useDispatch();\n\n    const openEditorSection = () => {\n        if (openEditorName === 'globalSetting') {\n            dispatch(updateOpenEditorName(null));\n        } else {\n            dispatch(updateOpenEditorName('globalSetting'));\n        }\n    };\n\n    useEffect(() => {\n        console.log('calling builder effect');\n        setItems(resumeDataReducer.resumeData);\n        setResumeSettings(resumeSettingsReducer.resumeSettings);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [resumeDataReducer]);\n\n    useEffect(() => {\n        if (authReducer.userId) {\n            console.log('calling builder auth effect');\n            getResumeData();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [authReducer]);\n\n    function getResumeData() {\n        dispatch(getResumeDataByResumeId(resumeId)).then(res => {\n            if (res.payload) {\n                setItems(res.payload);\n                console.log(res.payload);\n                setPageTwo(res.payload.pageTwo && res.payload.pageTwo.length > 0);\n            }\n        });\n\n        dispatch(getUserDataByUserId(authReducer.userId));\n\n        dispatch(getResumeSettingsByResumeId(resumeId)).then(res => {\n            setResumeSettings(res.payload);\n            if (res.payload) {\n                const root = document.querySelector(':root');\n                root.style.setProperty('--color-font-heading', res.payload.headingFontColor);\n                root.style.setProperty('--color-font-subheading', res.payload.subheadingFontColor);\n                root.style.setProperty('--color-font-body', res.payload.bodyFontColor);\n                root.style.setProperty('--color-font-about-section', res.payload.aboutSectionFontColor);\n                root.style.setProperty('--color-sidebar-body', res.payload.sidebarBodyColor);\n                root.style.setProperty('--color-sidebar-heading', res.payload.sidebarHeadingColor);\n            }\n        });\n    }\n\n    function updateResumeData(newData) {\n        if (authReducer.userId) {\n            dispatch(updateResumeDataByResumeId({ data: newData, resumeId: resumeId })).then(res => {\n                setIsLoading(false);\n            });\n        }\n\n        setTimeout(() => {\n            checkForPageTwo(newData);\n        }, 1000);\n    }\n\n    function updateGlobalSetting(newData) {\n        if (authReducer.userId) {\n            dispatch(updateResumeSettingsByResumeId({ data: newData, resumeId: resumeId }));\n            dispatch(updateSettingsDataReducer(newData));\n        }\n    }\n\n    const checkForPageTwo = newData => {\n        const paperheight = document.querySelector('#main .resume-paper-content').clientHeight;\n        const childs = document.querySelector('#main .resume-paper-content').children;\n        let height = 0;\n        for (var i = 0; i < childs.length; i++) {\n            height += childs[i].clientHeight;\n        }\n        if (height + 30 > paperheight) {\n            console.log('if- need Page two');\n            setPageTwo(true);\n\n            moveLastComponentToPageTwo(newData);\n        } else {\n            console.log('else-');\n            // setPageTwo(false);\n            console.log(paperheight, height);\n        }\n    };\n\n    const moveLastComponentToPageTwo = newData => {\n        let newArr = JSON.parse(JSON.stringify(newData));\n        newArr.pageTwo.push(newArr.main[newArr.main.length - 1]);\n        newArr.main.pop();\n        setItems(newArr);\n        updateResumeData(newArr);\n    };\n\n    const onSidebarSettingClick = () => {\n        if (resumeSettings.sidebar) {\n            const newArr = { ...arr, componentLibrary: [...arr['componentLibrary'], ...arr['sidebar']], sidebar: [] };\n            setItems(newArr);\n        }\n\n        setResumeSettings({ ...resumeSettings, sidebar: !resumeSettings.sidebar });\n        updateGlobalSetting({ ...resumeSettings, sidebar: !resumeSettings.sidebar });\n    };\n\n    const saveChanges = () => {\n        setIsLoading(true);\n        if (authReducer.userId) {\n            updateResumeData(arr);\n            updateResumeThumbnail();\n        }\n    };\n\n    const updateResumeThumbnail = () => {\n        const pageOneElement = document.querySelector('#pageOne');\n        html2canvas(pageOneElement).then(function (canvas) {\n            const userResumesData = JSON.parse(userDataReducer.userData.userResumes);\n            userResumesData.filter(resume => resume.resumeId.toString() === resumeId.toString())[0].resumeImage =\n                canvas.toDataURL('image/jpeg');\n            dispatch(\n                updateUserResumeDataByUserId({ userId: authReducer.userId, data: JSON.stringify(userResumesData) })\n            );\n        });\n    };\n\n    const getUniqueId = () => {\n        return Math.floor(Math.random() * Date.now());\n    };\n\n    const closeSnackBar = () => {\n        setopenSnackbar(false);\n    };\n\n    const copyComponent = (event, item, index, column) => {\n        item = { ...item, copy: true, name: `${item.name}-${getUniqueId()}` };\n        let newArr = JSON.parse(JSON.stringify(arr));\n        newArr[column].splice(index + 1, 0, item);\n        setItems(newArr);\n        updateResumeData(newArr);\n    };\n\n    const removeComponent = (event, item, index, column) => {\n        let newArr = JSON.parse(JSON.stringify(arr));\n        newArr[column].splice(index, 1);\n        newArr.componentLibrary.push(item);\n        setItems(newArr);\n        updateResumeData(newArr);\n    };\n\n    const addComponentToResume = (event, item, index, column) => {\n        let newArr = JSON.parse(JSON.stringify(arr));\n        newArr[column].splice(index, 1);\n        newArr.main.push(item);\n        setItems(newArr);\n        updateResumeData(newArr);\n    };\n\n    const deleteComponent = (event, item, index, column) => {\n        let newArr = JSON.parse(JSON.stringify(arr));\n        newArr[column].splice(index, 1);\n        setItems(newArr);\n        updateResumeData(newArr);\n    };\n\n    const addResumePage = () => {\n        setPageTwo(true);\n        setTimeout(() => {\n            const body = document.getElementById('resumePageSeparator');\n            body.scrollIntoView(\n                {\n                    behavior: 'smooth',\n                },\n                300\n            );\n        }, 200);\n    };\n\n    const removeResumePage = () => {\n        setPageTwo(false);\n\n        let newArr = JSON.parse(JSON.stringify(arr));\n        const mergedArr = [...newArr.componentLibrary, ...newArr.pageTwo];\n        newArr.componentLibrary = mergedArr;\n        newArr.pageTwo = [];\n        setItems(newArr);\n        updateResumeData(newArr);\n    };\n\n    function onDragEnd(result) {\n        const { destination, source, draggableId } = result;\n        // if canceling the dragNdrop in between\n        if (!destination || (destination.droppableId === source.droppableId && destination.index === source.index)) {\n            return;\n        }\n\n        // if rearranging in same column\n        if (destination.droppableId === source.droppableId) {\n            const newArr = Array.from(arr[source.droppableId]);\n            newArr.splice(source.index, 1);\n            newArr.splice(destination.index, 0, arr[destination.droppableId].filter(x => x.name === draggableId)[0]);\n\n            const colId = destination.droppableId;\n\n            const newColumn = {\n                ...arr,\n                [colId]: newArr,\n            };\n            setItems(newColumn);\n            updateResumeData(newColumn);\n        } else {\n            // Else if moving from sidebar to main column or vice-versa\n            const sourceId = source.droppableId;\n            const destId = destination.droppableId;\n            const sourceArr = Array.from(arr[source.droppableId]);\n            const destArr = Array.from(arr[destination.droppableId]);\n            // remove from source\n            sourceArr.splice(source.index, 1);\n            // add to destination\n            destArr.splice(destination.index, 0, arr[source.droppableId].filter(x => x.name === result.draggableId)[0]);\n            const newColumn = {\n                ...arr,\n                [sourceId]: sourceArr,\n                [destId]: destArr,\n            };\n            setItems(newColumn);\n            updateResumeData(newColumn);\n        }\n    }\n\n    function getComponent(componentType, item, columnName) {\n        switch (componentType) {\n            case 'Achievements':\n                return <Achievement componentColumn={columnName} componentItem={item} />;\n\n            case 'BasicInfo':\n                return <BasicInfo componentColumn={columnName} componentItem={item} />;\n\n            case 'Experience':\n                return <Experience componentColumn={columnName} componentItem={item} />;\n\n            case 'Education':\n                return <Education componentColumn={columnName} componentItem={item} />;\n\n            case 'Languages':\n                return <Languages componentColumn={columnName} componentItem={item} />;\n\n            case 'ProfessionalSummary':\n                return <ProfessionalSummary componentColumn={columnName} componentItem={item} />;\n\n            case 'Skills':\n                return <Skills componentColumn={columnName} componentItem={item} />;\n\n            case 'SkillsWithProgress':\n                return <SkillsWithProgress componentColumn={columnName} componentItem={item} />;\n\n            case 'Social':\n                return <Social componentColumn={columnName} componentItem={item} />;\n\n            case 'Divider':\n                return <Divider componentColumn={columnName} componentItem={item} />;\n\n            default:\n                return null;\n        }\n    }\n\n    if (arr && resumeSettings) {\n        resumeHTML = (\n            <DragDropContext onDragEnd={onDragEnd}>\n                <Snackbar\n                    open={openSnackbar}\n                    autoHideDuration={5000}\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                    onClose={closeSnackBar}\n                >\n                    <Alert variant='filled' severity='success' color='primary' sx={{ width: '100%' }}>\n                        New Widgets Available. Try Out.\n                    </Alert>\n                </Snackbar>\n                <div className='resume-paper-wrap'>\n                    <Grid container spacing={2}>\n                        <Grid item xs={7}>\n                            <div className='layout-options'>\n                                <div className='layout-option-items'>\n                                    <div className='layout-option-item'>\n                                        {resumeSettings.sidebar ? (\n                                            <Button\n                                                variant='outlined'\n                                                color='primary'\n                                                size='small'\n                                                startIcon={<WebAssetOutlinedIcon />}\n                                                onClick={onSidebarSettingClick}\n                                            >\n                                                Single Column\n                                            </Button>\n                                        ) : (\n                                            <Button\n                                                variant='outlined'\n                                                color='primary'\n                                                size='small'\n                                                startIcon={<WebOutlinedIcon />}\n                                                onClick={onSidebarSettingClick}\n                                            >\n                                                Sidebar\n                                            </Button>\n                                        )}\n                                    </div>\n\n                                    <div className='layout-option-item'>\n                                        {pageTwo ? (\n                                            <Button\n                                                variant='outlined'\n                                                color='primary'\n                                                size='small'\n                                                startIcon={<RemoveCircleOutlineOutlinedIcon />}\n                                                onClick={removeResumePage}\n                                            >\n                                                Remove Page\n                                            </Button>\n                                        ) : (\n                                            <Button\n                                                variant='outlined'\n                                                color='primary'\n                                                size='small'\n                                                startIcon={<AddCircleOutlineOutlinedIcon />}\n                                                onClick={addResumePage}\n                                            >\n                                                Add Page\n                                            </Button>\n                                        )}\n                                    </div>\n\n                                    <div className='layout-option-item'>\n                                        <Button\n                                            variant='outlined'\n                                            color='primary'\n                                            size='small'\n                                            startIcon={<SettingsOutlinedIcon />}\n                                            onClick={openEditorSection}\n                                        >\n                                            Settings\n                                        </Button>\n                                    </div>\n                                </div>\n\n                                <div className='layout-option-items'>\n                                    <div className='layout-option-item'>\n                                        <Button\n                                            onClick={window.print}\n                                            startIcon={<FileDownloadOutlinedIcon />}\n                                            variant='contained'\n                                            color='primary'\n                                            size='small'\n                                            disableElevation\n                                        >\n                                            Download\n                                        </Button>\n                                    </div>\n                                    <div className='layout-option-item'>\n                                        <Button\n                                            className={isLoading ? 'item-disabled' : ''}\n                                            color='primary'\n                                            variant='contained'\n                                            disableElevation\n                                            size='small'\n                                            startIcon={<SaveOutlinedIcon />}\n                                            onClick={saveChanges}\n                                        >\n                                            Save Changes\n                                        </Button>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='resume-paper-container' id='resumPaperContainer'>\n                                <Paper\n                                    className={`resume-paper heading-alignment-${resumeSettings.headingAlignment} heading-font-${resumeSettings.headingFontSize} subheading-font-${resumeSettings.subheadingFontSize} body-font-${resumeSettings.bodyFontSize}`}\n                                    sx={{\n                                        fontSize:\n                                            resumeSettings.bodyFontSize === 'medium'\n                                                ? '15px'\n                                                : resumeSettings.bodyFontSize,\n                                    }}\n                                    elevation={3}\n                                >\n                                    <div id='pageOne'>\n                                        <Grid\n                                            item\n                                            xs={12}\n                                            id='header'\n                                            className={`${arr.header.length > 0 ? '' : 'no-padding'}`}\n                                            sx={{\n                                                backgroundColor: resumeSettings.headerBackgroundColor,\n                                                color: resumeSettings.aboutSectionFontColor,\n                                            }}\n                                        >\n                                            <Droppable droppableId='header'>\n                                                {(provided, snapshot) => (\n                                                    <div\n                                                        ref={provided.innerRef}\n                                                        {...provided.droppableProps}\n                                                        className={\n                                                            snapshot.isDraggingOver\n                                                                ? 'resume-paper-content-draggin-over'\n                                                                : 'resume-paper-content'\n                                                        }\n                                                    >\n                                                        {arr.header.map((item, index) => {\n                                                            return (\n                                                                <Draggable\n                                                                    key={item.name}\n                                                                    draggableId={item.name}\n                                                                    index={index}\n                                                                >\n                                                                    {(provided, snapshot) => (\n                                                                        <div\n                                                                            className={\n                                                                                snapshot.isDragging\n                                                                                    ? 'component-dragging'\n                                                                                    : 'resume-section-wrap'\n                                                                            }\n                                                                            ref={provided.innerRef}\n                                                                            {...provided.draggableProps}\n                                                                            key={item.name}\n                                                                        >\n                                                                            {getComponent(\n                                                                                item.componentType,\n                                                                                item,\n                                                                                'header'\n                                                                            )}\n                                                                            <div className='overlay'>\n                                                                                <span\n                                                                                    className='drag-handle'\n                                                                                    {...provided.dragHandleProps}\n                                                                                >\n                                                                                    <OpenWithIcon titleAccess='Grab & Move' />\n                                                                                </span>\n                                                                                <span className='copy-component'>\n                                                                                    <ContentCopyOutlinedIcon\n                                                                                        titleAccess='Copy'\n                                                                                        onClick={event =>\n                                                                                            copyComponent(\n                                                                                                event,\n                                                                                                item,\n                                                                                                index,\n                                                                                                'header'\n                                                                                            )\n                                                                                        }\n                                                                                    />\n                                                                                </span>\n                                                                                <span className='remove-component'>\n                                                                                    <RemoveOutlinedIcon\n                                                                                        titleAccess='Remove From Resume'\n                                                                                        onClick={event =>\n                                                                                            removeComponent(\n                                                                                                event,\n                                                                                                item,\n                                                                                                index,\n                                                                                                'header'\n                                                                                            )\n                                                                                        }\n                                                                                    />\n                                                                                </span>\n                                                                                <span\n                                                                                    className={\n                                                                                        item.copy\n                                                                                            ? 'delete-component'\n                                                                                            : 'd-none'\n                                                                                    }\n                                                                                >\n                                                                                    <DeleteOutlinedIcon\n                                                                                        onClick={event =>\n                                                                                            deleteComponent(\n                                                                                                event,\n                                                                                                item,\n                                                                                                index,\n                                                                                                'header'\n                                                                                            )\n                                                                                        }\n                                                                                    />\n                                                                                </span>\n                                                                            </div>\n                                                                        </div>\n                                                                    )}\n                                                                </Draggable>\n                                                            );\n                                                        })}\n                                                        {provided.placeholder}\n                                                    </div>\n                                                )}\n                                            </Droppable>\n                                        </Grid>\n                                        <div\n                                            className={`resume-paper-main-content sidebar-${resumeSettings.sidebarPosition}`}\n                                        >\n                                            <Grid\n                                                item\n                                                xs={resumeSettings.sidebar ? 7 : 12}\n                                                id='main'\n                                                className={`${arr.header.length > 0 ? '' : 'padding'}`}\n                                                sx={{\n                                                    backgroundColor: resumeSettings.mainBackgroundColor,\n                                                    color: resumeSettings.bodyFontColor,\n                                                }}\n                                            >\n                                                <Droppable droppableId='main'>\n                                                    {(provided, snapshot) => (\n                                                        <div\n                                                            ref={provided.innerRef}\n                                                            {...provided.droppableProps}\n                                                            className={\n                                                                snapshot.isDraggingOver\n                                                                    ? 'resume-paper-content-draggin-over'\n                                                                    : 'resume-paper-content'\n                                                            }\n                                                        >\n                                                            {arr.main.map((item, index) => {\n                                                                return (\n                                                                    <Draggable\n                                                                        key={item.name}\n                                                                        draggableId={item.name}\n                                                                        index={index}\n                                                                    >\n                                                                        {(provided, snapshot) => (\n                                                                            <div\n                                                                                className={\n                                                                                    snapshot.isDragging\n                                                                                        ? 'resume-section-wrap component-dragging'\n                                                                                        : 'resume-section-wrap'\n                                                                                }\n                                                                                ref={provided.innerRef}\n                                                                                {...provided.draggableProps}\n                                                                                key={item.name}\n                                                                            >\n                                                                                {getComponent(\n                                                                                    item.componentType,\n                                                                                    item,\n                                                                                    'main'\n                                                                                )}\n                                                                                <div className='overlay'>\n                                                                                    <span\n                                                                                        className='drag-handle'\n                                                                                        {...provided.dragHandleProps}\n                                                                                    >\n                                                                                        <OpenWithIcon titleAccess='Grab & Move' />\n                                                                                    </span>\n                                                                                    <span className='copy-component'>\n                                                                                        <ContentCopyOutlinedIcon\n                                                                                            titleAccess='Copy'\n                                                                                            onClick={event =>\n                                                                                                copyComponent(\n                                                                                                    event,\n                                                                                                    item,\n                                                                                                    index,\n                                                                                                    'main'\n                                                                                                )\n                                                                                            }\n                                                                                        />\n                                                                                    </span>\n                                                                                    <span className='remove-component'>\n                                                                                        <RemoveOutlinedIcon\n                                                                                            titleAccess='Remove From Resume'\n                                                                                            onClick={event =>\n                                                                                                removeComponent(\n                                                                                                    event,\n                                                                                                    item,\n                                                                                                    index,\n                                                                                                    'main'\n                                                                                                )\n                                                                                            }\n                                                                                        />\n                                                                                    </span>\n                                                                                    <span\n                                                                                        className={\n                                                                                            item.copy\n                                                                                                ? 'delete-component'\n                                                                                                : 'd-none'\n                                                                                        }\n                                                                                    >\n                                                                                        <DeleteOutlinedIcon\n                                                                                            onClick={event =>\n                                                                                                deleteComponent(\n                                                                                                    event,\n                                                                                                    item,\n                                                                                                    index,\n                                                                                                    'main'\n                                                                                                )\n                                                                                            }\n                                                                                        />\n                                                                                    </span>\n                                                                                </div>\n                                                                            </div>\n                                                                        )}\n                                                                    </Draggable>\n                                                                );\n                                                            })}\n                                                            {provided.placeholder}\n                                                        </div>\n                                                    )}\n                                                </Droppable>\n                                            </Grid>\n\n                                            {resumeSettings.sidebar ? (\n                                                <Grid\n                                                    item\n                                                    xs={5}\n                                                    id='sidebar'\n                                                    sx={{\n                                                        backgroundColor: resumeSettings.sidebarBackgroundColor,\n                                                        color: resumeSettings.sidebarBodyColor,\n                                                    }}\n                                                    className={`${arr.header.length > 0 ? '' : 'padding'}`}\n                                                >\n                                                    <Droppable droppableId='sidebar'>\n                                                        {(provided, snapshot) => (\n                                                            <div\n                                                                ref={provided.innerRef}\n                                                                {...provided.droppableProps}\n                                                                className={\n                                                                    snapshot.isDraggingOver\n                                                                        ? 'resume-paper-content resume-paper-content-draggin-over sidebar-column'\n                                                                        : 'resume-paper-content sidebar-column'\n                                                                }\n                                                            >\n                                                                {provided.isDragging}\n                                                                {arr.sidebar.map((item, index) => {\n                                                                    return (\n                                                                        <Draggable\n                                                                            key={item.name}\n                                                                            draggableId={item.name}\n                                                                            index={index}\n                                                                        >\n                                                                            {(provided, snapshot) => (\n                                                                                <div\n                                                                                    className={\n                                                                                        snapshot.isDragging\n                                                                                            ? 'component-dragging'\n                                                                                            : 'resume-section-wrap'\n                                                                                    }\n                                                                                    ref={provided.innerRef}\n                                                                                    {...provided.draggableProps}\n                                                                                    key={item.name}\n                                                                                >\n                                                                                    {getComponent(\n                                                                                        item.componentType,\n                                                                                        item,\n                                                                                        'sidebar'\n                                                                                    )}\n                                                                                    <div className='overlay'>\n                                                                                        <span\n                                                                                            className='drag-handle'\n                                                                                            {...provided.dragHandleProps}\n                                                                                        >\n                                                                                            <OpenWithIcon titleAccess='Grab & Move' />\n                                                                                        </span>\n                                                                                        <span className='copy-component'>\n                                                                                            <ContentCopyOutlinedIcon\n                                                                                                titleAccess='Copy'\n                                                                                                onClick={event =>\n                                                                                                    copyComponent(\n                                                                                                        event,\n                                                                                                        item,\n                                                                                                        index,\n                                                                                                        'sidebar'\n                                                                                                    )\n                                                                                                }\n                                                                                            />\n                                                                                        </span>\n                                                                                        <span className='remove-component'>\n                                                                                            <RemoveOutlinedIcon\n                                                                                                titleAccess='Remove From Resume'\n                                                                                                onClick={event =>\n                                                                                                    removeComponent(\n                                                                                                        event,\n                                                                                                        item,\n                                                                                                        index,\n                                                                                                        'sidebar'\n                                                                                                    )\n                                                                                                }\n                                                                                            />\n                                                                                        </span>\n                                                                                        <span\n                                                                                            className={\n                                                                                                item.copy\n                                                                                                    ? 'delete-component'\n                                                                                                    : 'd-none'\n                                                                                            }\n                                                                                        >\n                                                                                            <DeleteOutlinedIcon\n                                                                                                onClick={event =>\n                                                                                                    deleteComponent(\n                                                                                                        event,\n                                                                                                        item,\n                                                                                                        index,\n                                                                                                        'sidebar'\n                                                                                                    )\n                                                                                                }\n                                                                                            />\n                                                                                        </span>\n                                                                                    </div>\n                                                                                </div>\n                                                                            )}\n                                                                        </Draggable>\n                                                                    );\n                                                                })}\n                                                                {provided.placeholder}\n                                                            </div>\n                                                        )}\n                                                    </Droppable>\n                                                </Grid>\n                                            ) : null}\n                                        </div>\n                                    </div>\n                                </Paper>\n                                <Box sx={{ height: 30 }} id='resumePageSeparator'></Box>\n                                {pageTwo ? (\n                                    <Paper\n                                        className={`resume-paper heading-alignment-${resumeSettings.headingAlignment} heading-font-${resumeSettings.headingFontSize} subheading-font-${resumeSettings.subheadingFontSize} body-font-${resumeSettings.bodyFontSize}`}\n                                        sx={{\n                                            fontSize: resumeSettings.bodyFontSize,\n                                            color: resumeSettings.bodyFontColor,\n                                        }}\n                                        elevation={3}\n                                    >\n                                        <div id='pageTwo'>\n                                            <Grid item xs={12} className={`${arr.header.length > 0 ? '' : 'padding'}`}>\n                                                <Droppable droppableId='pageTwo'>\n                                                    {(provided, snapshot) => (\n                                                        <div\n                                                            ref={provided.innerRef}\n                                                            {...provided.droppableProps}\n                                                            className={\n                                                                snapshot.isDraggingOver\n                                                                    ? 'resume-paper-content-draggin-over'\n                                                                    : 'resume-paper-content'\n                                                            }\n                                                        >\n                                                            <Suspense fallback={<div>Loading</div>}>\n                                                                {arr.pageTwo.map((item, index) => {\n                                                                    return (\n                                                                        <Draggable\n                                                                            key={item.name}\n                                                                            draggableId={item.name}\n                                                                            index={index}\n                                                                        >\n                                                                            {(provided, snapshot) => (\n                                                                                <div\n                                                                                    className={\n                                                                                        snapshot.isDragging\n                                                                                            ? 'resume-section-wrap component-dragging'\n                                                                                            : 'resume-section-wrap'\n                                                                                    }\n                                                                                    ref={provided.innerRef}\n                                                                                    {...provided.draggableProps}\n                                                                                    key={item.name}\n                                                                                >\n                                                                                    {getComponent(\n                                                                                        item.componentType,\n                                                                                        item,\n                                                                                        'pageTwo'\n                                                                                    )}\n                                                                                    <div className='overlay'>\n                                                                                        <span\n                                                                                            className='drag-handle'\n                                                                                            {...provided.dragHandleProps}\n                                                                                        >\n                                                                                            <OpenWithIcon titleAccess='Grab & Move' />\n                                                                                        </span>\n                                                                                        <span className='copy-component'>\n                                                                                            <ContentCopyOutlinedIcon\n                                                                                                titleAccess='Copy'\n                                                                                                onClick={event =>\n                                                                                                    copyComponent(\n                                                                                                        event,\n                                                                                                        item,\n                                                                                                        index,\n                                                                                                        'pageTwo'\n                                                                                                    )\n                                                                                                }\n                                                                                            />\n                                                                                        </span>\n                                                                                        <span className='remove-component'>\n                                                                                            <RemoveOutlinedIcon\n                                                                                                titleAccess='Remove From Resume'\n                                                                                                onClick={event =>\n                                                                                                    removeComponent(\n                                                                                                        event,\n                                                                                                        item,\n                                                                                                        index,\n                                                                                                        'pageTwo'\n                                                                                                    )\n                                                                                                }\n                                                                                            />\n                                                                                        </span>\n                                                                                        <span\n                                                                                            className={\n                                                                                                item.copy\n                                                                                                    ? 'delete-component'\n                                                                                                    : 'd-none'\n                                                                                            }\n                                                                                        >\n                                                                                            <DeleteOutlinedIcon\n                                                                                                onClick={event =>\n                                                                                                    deleteComponent(\n                                                                                                        event,\n                                                                                                        item,\n                                                                                                        index,\n                                                                                                        'pageTwo'\n                                                                                                    )\n                                                                                                }\n                                                                                            />\n                                                                                        </span>\n                                                                                    </div>\n                                                                                </div>\n                                                                            )}\n                                                                        </Draggable>\n                                                                    );\n                                                                })}\n                                                                {provided.placeholder}\n                                                            </Suspense>\n                                                        </div>\n                                                    )}\n                                                </Droppable>\n                                            </Grid>\n                                        </div>\n                                    </Paper>\n                                ) : null}\n                            </div>\n                        </Grid>\n                        <Grid className='component-library-wrap' item xs={5}>\n                            <div id='editorPortal'></div>\n                            {openEditorName === 'globalSetting' ? (\n                                <div className='setting-editor-container'>\n                                    <GlobalResumeSetting\n                                        resumeSettings={resumeSettings}\n                                        setResumeSettings={setResumeSettings}\n                                        updateGlobalSetting={updateGlobalSetting}\n                                        openEditorSection={openEditorSection}\n                                    ></GlobalResumeSetting>\n                                </div>\n                            ) : (\n                                openEditorName === null && (\n                                    <div>\n                                        <div className='component-library-header'>\n                                            <div>\n                                                <span className='component-library-title'>All Widgets</span>\n                                            </div>\n                                            <Autocomplete\n                                                id='component-library-filter'\n                                                options={[\n                                                    { label: 'Education', id: 1 },\n                                                    { label: 'Skills', id: 2 },\n                                                ]}\n                                                sx={{ width: 150 }}\n                                                renderInput={params => (\n                                                    <TextField {...params} placeholder='Filter' variant='standard' />\n                                                )}\n                                            />\n                                        </div>\n                                        <Paper style={{ padding: '20px' }} className='widget-library' elevation={0}>\n                                            <Droppable droppableId='componentLibrary'>\n                                                {(provided, snapshot) => (\n                                                    <div\n                                                        ref={provided.innerRef}\n                                                        {...provided.droppableProps}\n                                                        className={\n                                                            snapshot.isDraggingOver\n                                                                ? 'resume-paper-content-draggin-over'\n                                                                : 'resume-paper-content'\n                                                        }\n                                                    >\n                                                        {provided.isDragging}\n                                                        <Suspense fallback={<div>Loading</div>}>\n                                                            {arr.componentLibrary.map((item, index) => {\n                                                                return (\n                                                                    <Draggable\n                                                                        key={item.name}\n                                                                        draggableId={item.name}\n                                                                        index={index}\n                                                                    >\n                                                                        {(provided, snapshot) => (\n                                                                            <div\n                                                                                className={\n                                                                                    snapshot.isDragging\n                                                                                        ? 'resume-section-wrap component-dragging'\n                                                                                        : 'resume-section-wrap'\n                                                                                }\n                                                                                ref={provided.innerRef}\n                                                                                {...provided.draggableProps}\n                                                                                key={item.name}\n                                                                            >\n                                                                                {getComponent(\n                                                                                    item.componentType,\n                                                                                    item,\n                                                                                    'componentLibrary'\n                                                                                )}\n                                                                                <div className='overlay'>\n                                                                                    <span\n                                                                                        className='drag-handle'\n                                                                                        {...provided.dragHandleProps}\n                                                                                    >\n                                                                                        <OpenWithIcon titleAccess='Grab & Move' />\n                                                                                    </span>\n                                                                                    <span className='copy-component'>\n                                                                                        <ContentCopyOutlinedIcon\n                                                                                            titleAccess='Copy'\n                                                                                            onClick={event =>\n                                                                                                copyComponent(\n                                                                                                    event,\n                                                                                                    item,\n                                                                                                    index,\n                                                                                                    'componentLibrary'\n                                                                                                )\n                                                                                            }\n                                                                                        />\n                                                                                    </span>\n                                                                                    <span className='remove-component'>\n                                                                                        <AddOutlinedIcon\n                                                                                            titleAccess='Add to Resume'\n                                                                                            onClick={event =>\n                                                                                                addComponentToResume(\n                                                                                                    event,\n                                                                                                    item,\n                                                                                                    index,\n                                                                                                    'componentLibrary'\n                                                                                                )\n                                                                                            }\n                                                                                        />\n                                                                                    </span>\n                                                                                    <span\n                                                                                        className={\n                                                                                            item.copy\n                                                                                                ? 'delete-component'\n                                                                                                : 'd-none'\n                                                                                        }\n                                                                                    >\n                                                                                        <DeleteOutlinedIcon\n                                                                                            onClick={event =>\n                                                                                                deleteComponent(\n                                                                                                    event,\n                                                                                                    item,\n                                                                                                    index,\n                                                                                                    'componentLibrary'\n                                                                                                )\n                                                                                            }\n                                                                                        />\n                                                                                    </span>\n                                                                                </div>\n                                                                            </div>\n                                                                        )}\n                                                                    </Draggable>\n                                                                );\n                                                            })}\n                                                            {provided.placeholder}\n                                                        </Suspense>\n                                                    </div>\n                                                )}\n                                            </Droppable>\n                                        </Paper>\n                                    </div>\n                                )\n                            )}\n                        </Grid>\n                    </Grid>\n                </div>\n            </DragDropContext>\n        );\n    } else {\n        resumeHTML = (\n            <div className='initial-loader'>\n                <CircularProgress />\n            </div>\n        );\n    }\n\n    return (\n        <div className='builder-wrap'>\n            <LinearProgress className={isLoading ? '' : 'd-none'} color='primary' />\n            {resumeHTML}\n        </div>\n    );\n}\n\nexport default Builder;\n","export default __webpack_public_path__ + \"static/media/resume-2.edfc1b35.svg\";","import React, { useEffect, useState } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    getUserDataByUserId,\n    createNewReumseByUserId,\n    updateUserResumeDataByUserId,\n    deleteResumeByResumeId,\n    copyResumeByResumeId,\n} from '../../reducers/userDataSlice';\nimport { Button, Grid, CircularProgress, Box, LinearProgress, Dialog, DialogContent } from '@mui/material';\nimport { useHistory } from 'react-router-dom';\nimport AddCircleOutlineOutlinedIcon from '@mui/icons-material/AddCircleOutlineOutlined';\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\nimport CopyAllOutlinedIcon from '@mui/icons-material/CopyAllOutlined';\nimport VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined';\nimport ShareOutlinedIcon from '@mui/icons-material/ShareOutlined';\nimport resumeSvg from '../../assets/images/resume-2.svg';\nimport './Resumes.css';\n\nconst Resumes = () => {\n    const { authReducer } = useSelector(state => state);\n    const [userData, setUserData] = useState(null);\n    const [userResumes, setUserResumes] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [previewResumeImageSrc, setPreviewResumeImageSrc] = useState('');\n    const history = useHistory();\n    const maxResumeNumber = 2;\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (authReducer.userId) {\n            console.log('calling resume auth effect');\n            getUserData();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [authReducer]);\n\n    // useEffect(() => {\n    //   console.log('calling resume effect');\n    //   setUserData(userDataReducer.userData);\n    //   //setUserResumes(userDataReducer.userData.userResumes);\n    //     // eslint-disable-next-line react-hooks/exhaustive-deps\n    // }, [userDataReducer]);\n\n    const closeEditor = () => {\n        setOpen(false);\n    };\n\n    const previewResume = resumeImage => {\n        setOpen(true);\n        setPreviewResumeImageSrc(resumeImage);\n    };\n\n    const getUserData = () => {\n        dispatch(getUserDataByUserId(authReducer.userId)).then(res => {\n            if (res.payload) {\n                setUserData(res.payload);\n                setUserResumes(JSON.parse(res.payload.userResumes));\n            }\n        });\n    };\n\n    const getUniqueId = () => {\n        return Math.floor(Math.random() * Date.now());\n    };\n\n    const createNewResume = () => {\n        setIsLoading(true);\n        const uniqueId = getUniqueId();\n\n        if (authReducer.userId) {\n            dispatch(createNewReumseByUserId({ data: userResumes, userData: userData, uniqueId: uniqueId })).then(\n                res => {\n                    setUserResumes(res.payload);\n                    setIsLoading(false);\n                    history.push(`builder/${uniqueId}`);\n                }\n            );\n        }\n    };\n\n    const onDeleteResume = resumeId => {\n        setIsLoading(true);\n        const userResumeData = JSON.parse(JSON.stringify(userResumes));\n        const newResumeData = userResumeData.filter(item => item.resumeId !== resumeId);\n\n        dispatch(deleteResumeByResumeId(resumeId));\n\n        setUserResumes(newResumeData);\n        dispatch(\n            updateUserResumeDataByUserId({ userId: authReducer.userId, data: JSON.stringify(newResumeData) })\n        ).then(res => {\n            setIsLoading(false);\n        });\n    };\n\n    const onDuplicateResume = resumeId => {\n        setIsLoading(true);\n        dispatch(getUserDataByUserId(authReducer.userId)).then(res => {\n            if (res.payload) {\n                if (JSON.parse(res.payload.userResumes).length < maxResumeNumber) {\n                    const uniqueId = getUniqueId();\n                    const userResumeData = JSON.parse(JSON.stringify(userResumes));\n                    const copyFrom = userResumeData.filter(item => item.resumeId === resumeId)[0];\n                    userResumeData.push({\n                        resumeId: uniqueId.toString(),\n                        resumeName: `${copyFrom.resumeName} (copy)`,\n                        resumeImage: copyFrom.resumeImage,\n                    });\n\n                    dispatch(\n                        updateUserResumeDataByUserId({\n                            userId: authReducer.userId,\n                            data: JSON.stringify(userResumeData),\n                        })\n                    );\n                    dispatch(copyResumeByResumeId({ resumeId: resumeId, uniqueId: uniqueId })).then(res => {\n                        setUserResumes(userResumeData);\n                        setIsLoading(false);\n                    });\n                } else {\n                    setIsLoading(false);\n                    setUserData(res.payload);\n                    setUserResumes(JSON.parse(res.payload.userResumes));\n                }\n            }\n        });\n    };\n\n    return (\n        <div className='user-resumes-wrap'>\n            <Dialog open={open} onClose={closeEditor} scroll='body'>\n                <DialogContent className='preview-dialog-content'>\n                    <img alt='Resume Preview' className='resume-preview' src={previewResumeImageSrc} />\n                </DialogContent>\n            </Dialog>\n\n            <div className='resume-header'>\n                <h1>My Resumes</h1>\n                {userResumes && userResumes.length < maxResumeNumber && (\n                    <Button\n                        startIcon={<AddCircleOutlineOutlinedIcon />}\n                        size='small'\n                        onClick={createNewResume}\n                        variant='contained'\n                        color='primary'\n                        disableElevation\n                        className='header-create-resume-button'\n                    >\n                        New Resume\n                    </Button>\n                )}\n            </div>\n            <LinearProgress className={isLoading ? '' : 'd-none'} color='primary' />\n\n            {userResumes ? (\n                userResumes.length > 0 ? (\n                    <div className='user-resume-list-wrap'>\n                        {userResumes.map((item, index) => {\n                            return (\n                                <div className='resume-item' key={index}>\n                                    <div\n                                        className='resume-thumbnail'\n                                        style={{ backgroundImage: `url(${item.resumeImage})` }}\n                                    >\n                                        {' '}\n                                    </div>\n                                    <div className='resume-actions'>\n                                        <div className='resume-action-item name'>\n                                            <span>{item.resumeName}</span>\n                                        </div>\n                                        <div className='resume-action-item date'>\n                                            <span>Feb 2, 2020 2.45 PM</span>\n                                        </div>\n                                        <Box sx={{ height: '40px' }}></Box>\n                                        {/* EDIT ACTION */}\n                                        <div\n                                            className='resume-action-item link'\n                                            onClick={() => {\n                                                history.push(`builder/${item.resumeId}`);\n                                            }}\n                                        >\n                                            <span className='resume-action-item-link-icon'>\n                                                <EditOutlinedIcon />\n                                            </span>\n                                            <span className='resume-action-item-link-text'>Edit</span>\n                                        </div>\n\n                                        {/* COPY ACTION */}\n                                        {userResumes.length < maxResumeNumber && (\n                                            <div\n                                                className={`resume-action-item link ${\n                                                    isLoading ? 'item-disabled' : ''\n                                                }`}\n                                                onClick={() => {\n                                                    onDuplicateResume(item.resumeId);\n                                                }}\n                                            >\n                                                <span className='resume-action-item-link-icon'>\n                                                    <CopyAllOutlinedIcon />\n                                                </span>\n                                                <span className='resume-action-item-link-text'>Duplicate</span>\n                                            </div>\n                                        )}\n\n                                        {/* PREVIEW ACTION */}\n                                        <div\n                                            className='resume-action-item link'\n                                            onClick={() => {\n                                                previewResume(item.resumeImage);\n                                            }}\n                                        >\n                                            <span className='resume-action-item-link-icon'>\n                                                <VisibilityOutlinedIcon />\n                                            </span>\n                                            <span className='resume-action-item-link-text'>Preview</span>\n                                        </div>\n\n                                        {/* SHARE ACTION */}\n                                        <div className='resume-action-item link'>\n                                            <span className='resume-action-item-link-icon'>\n                                                <ShareOutlinedIcon />\n                                            </span>\n                                            <span className='resume-action-item-link-text'>Share</span>\n                                        </div>\n\n                                        {/* DELETE ACTION */}\n                                        <div\n                                            className='resume-action-item link'\n                                            onClick={() => {\n                                                onDeleteResume(item.resumeId);\n                                            }}\n                                        >\n                                            <span className='resume-action-item-link-icon'>\n                                                <DeleteOutlinedIcon />\n                                            </span>\n                                            <span className='resume-action-item-link-text'>Delete</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                ) : (\n                    <Grid\n                        container\n                        className='no-resume-wrap'\n                        spacing={0}\n                        direction='column'\n                        alignItems='center'\n                        justifyContent='center'\n                    >\n                        <Grid\n                            container\n                            spacing={0}\n                            direction='column'\n                            alignItems='center'\n                            justifyContent='center'\n                            item\n                            xs={3}\n                        >\n                            <div className='no-resume-text'>No resume created, please create one.</div>\n                            <img className='no-resume-img' alt='Create Resume' src={resumeSvg} />\n                        </Grid>\n                    </Grid>\n                )\n            ) : (\n                <Grid\n                    container\n                    className='no-resume-wrap'\n                    spacing={0}\n                    direction='column'\n                    alignItems='center'\n                    justifyContent='center'\n                >\n                    <CircularProgress />\n                </Grid>\n            )}\n        </div>\n    );\n};\n\nexport default Resumes;\n","import React from 'react';\nimport { Container, Box } from '@mui/material';\n\nconst Home = () => {\n    return (\n        <Container maxWidth='sm'>\n            <Box m='auto' textAlign='center'>\n                <h1>Home</h1>\n            </Box>\n        </Container>\n    );\n};\n\nexport default Home;\n","import './App.css';\n\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport GlobalHeader from '../GlobalHeader/GlobalHeader';\nimport About from '../../pages/About/About';\nimport Contact from '../../pages/Contact/Contact';\nimport Builder from '../../pages/Builder/Builder';\nimport Resumes from '../../pages/Resumes/Resumes';\nimport Home from '../../pages/Home/Home';\n\nfunction App() {\n    const isSignedIn = useSelector(state => state.authReducer.isSignedIn);\n    return (\n        <Router>\n            <GlobalHeader />\n            <Switch>\n                <Route path='/builder/:resumeId?'>\n                    {(isSignedIn || localStorage.getItem('token') !== null) && <Builder></Builder>}\n                    {!isSignedIn && localStorage.getItem('token') == null && <Redirect to='/'></Redirect>}\n                </Route>\n                <Route path='/contact'>\n                    <Contact />\n                </Route>\n                <Route path='/about'>\n                    <About />\n                </Route>\n                <Route exact path='/resumes'>\n                    {(isSignedIn || localStorage.getItem('token') !== null) && <Resumes></Resumes>}\n                    {!isSignedIn && localStorage.getItem('token') == null && <Redirect to='/'></Redirect>}\n                </Route>\n                <Route exact path='/'>\n                    <Home />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","import { createTheme } from '@mui/material/styles';\r\n\r\n// Or Create your Own theme:\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#09915A',\r\n        },\r\n        // text: {\r\n        //   primary: 'rgba(0, 0, 0, 0.90)',\r\n        //   secondary: 'red',\r\n        // }\r\n    },\r\n    components: {\r\n        MuiButton: {\r\n            variants: [\r\n                {\r\n                    props: { variant: 'space-40', color: 'primary' },\r\n                    style: {\r\n                        paddingLeft: '40px',\r\n                        paddingRight: '40px',\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme;\r\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport authSlice from './authSlice';\nimport userDataSlice from './userDataSlice';\nimport resumeDataSlice from './resumeDataSlice';\nimport resumeSettingsSlice from './resumeSettingsSlice';\n\n// export default combineReducers({\n//     authReducer: authReducer\n// });\n\nexport const store = configureStore({\n    reducer: {\n        authReducer: authSlice,\n        userDataReducer: userDataSlice,\n        resumeDataReducer: resumeDataSlice,\n        resumeSettingsReducer: resumeSettingsSlice,\n    },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from '@mui/material/styles';\nimport theme from './theme';\nimport { store } from './reducers';\n\nReactDOM.render(\n    <Provider store={store}>\n        <ThemeProvider theme={theme}>\n            <App />\n        </ThemeProvider>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}